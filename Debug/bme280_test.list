
bme280_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08001d28  08001d28  00011d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001ddc  08001ddc  00011ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001de0  08001de0  00011de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  08001de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  7 .bss          000002bc  2000007c  2000007c  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20000338  20000338  0002007c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002ff8  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000978  00000000  00000000  000230a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000198  00000000  00000000  00023a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  00023bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000fa8  00000000  00000000  00023d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000108a  00000000  00000000  00024cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00025d42  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000cbc  00000000  00000000  00025dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000084  00000000  00000000  00026a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000117  00000000  00000000  00026b00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001d10 	.word	0x08001d10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08001d10 	.word	0x08001d10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <I2C_init>:
#include "../inc/stm32f303_i2c.h"

I2C_deviceFoundCallbackFunctionPtr I2C_addressFoundCallback;

void I2C_init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	RCC->CFGR3 |= RCC_CFGR3_I2C1SW;
 8000274:	4a15      	ldr	r2, [pc, #84]	; (80002cc <I2C_init+0x5c>)
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <I2C_init+0x5c>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000280:	4a12      	ldr	r2, [pc, #72]	; (80002cc <I2C_init+0x5c>)
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <I2C_init+0x5c>)
 8000284:	69db      	ldr	r3, [r3, #28]
 8000286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800028a:	61d3      	str	r3, [r2, #28]

	GPIOB->MODER |= GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1;
 800028c:	4a10      	ldr	r2, [pc, #64]	; (80002d0 <I2C_init+0x60>)
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <I2C_init+0x60>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8000296:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT_6 | GPIO_OTYPER_OT_7;
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <I2C_init+0x60>)
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <I2C_init+0x60>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002a2:	6053      	str	r3, [r2, #4]
	GPIOB->AFR[0] |= (4<<24) | (4<<28);
 80002a4:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <I2C_init+0x60>)
 80002a6:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <I2C_init+0x60>)
 80002a8:	6a1b      	ldr	r3, [r3, #32]
 80002aa:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 80002ae:	6213      	str	r3, [r2, #32]

	I2C1->TIMINGR = (3<<28) |
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <I2C_init+0x64>)
 80002b2:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <I2C_init+0x68>)
 80002b4:	611a      	str	r2, [r3, #16]
					(16<<0)  |
					(16<<8)  |
					(2<<20) 	|
					(2<<16) 	;
	I2C1->CR1 |= I2C_CR1_NOSTRETCH;
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <I2C_init+0x64>)
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <I2C_init+0x64>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c0:	6013      	str	r3, [r2, #0]
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000
 80002d0:	48000400 	.word	0x48000400
 80002d4:	40005400 	.word	0x40005400
 80002d8:	30221010 	.word	0x30221010

080002dc <I2C_registerDeviceFoundCallback>:

void I2C_registerDeviceFoundCallback(I2C_deviceFoundCallbackFunctionPtr funcPtr)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	if(funcPtr)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d002      	beq.n	80002f0 <I2C_registerDeviceFoundCallback+0x14>
	{
		I2C_addressFoundCallback = funcPtr;
 80002ea:	4a04      	ldr	r2, [pc, #16]	; (80002fc <I2C_registerDeviceFoundCallback+0x20>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	6013      	str	r3, [r2, #0]
	}
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	20000330 	.word	0x20000330

08000300 <I2C_readNBytesFromAddress>:
	return buffer;
}


uint8_t * I2C_readNBytesFromAddress(uint8_t slave, uint8_t registerAddress, uint8_t * buffer, uint8_t len)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	603a      	str	r2, [r7, #0]
 8000308:	461a      	mov	r2, r3
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
 800030e:	460b      	mov	r3, r1
 8000310:	71bb      	strb	r3, [r7, #6]
 8000312:	4613      	mov	r3, r2
 8000314:	717b      	strb	r3, [r7, #5]
	uint8_t * data = buffer;
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	60fb      	str	r3, [r7, #12]

	I2C1->CR1 |= I2C_CR1_PE;
 800031a:	4a49      	ldr	r2, [pc, #292]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 800031c:	4b48      	ldr	r3, [pc, #288]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6013      	str	r3, [r2, #0]
	I2C1->CR2 = (I2C1->CR2 & 0xFFFFFF00) | (slave<<1);
 8000326:	4946      	ldr	r1, [pc, #280]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 8000328:	4b45      	ldr	r3, [pc, #276]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000330:	79fa      	ldrb	r2, [r7, #7]
 8000332:	0052      	lsls	r2, r2, #1
 8000334:	4313      	orrs	r3, r2
 8000336:	604b      	str	r3, [r1, #4]
	I2C1->CR2 = (I2C1->CR2 & 0xFF00FFFF) | (1<<16);
 8000338:	4a41      	ldr	r2, [pc, #260]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 800033a:	4b41      	ldr	r3, [pc, #260]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000346:	6053      	str	r3, [r2, #4]
	I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 8000348:	4a3d      	ldr	r2, [pc, #244]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 800034a:	4b3d      	ldr	r3, [pc, #244]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000352:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= I2C_CR2_START;
 8000354:	4a3a      	ldr	r2, [pc, #232]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 8000356:	4b3a      	ldr	r3, [pc, #232]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800035e:	6053      	str	r3, [r2, #4]
	while(I2C1->CR2 & I2C_CR2_START);
 8000360:	bf00      	nop
 8000362:	4b37      	ldr	r3, [pc, #220]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1f9      	bne.n	8000362 <I2C_readNBytesFromAddress+0x62>
	while(!(I2C1->ISR & I2C_ISR_TXIS));
 800036e:	bf00      	nop
 8000370:	4b33      	ldr	r3, [pc, #204]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0302 	and.w	r3, r3, #2
 8000378:	2b00      	cmp	r3, #0
 800037a:	d0f9      	beq.n	8000370 <I2C_readNBytesFromAddress+0x70>
	I2C1->TXDR = registerAddress;
 800037c:	4a30      	ldr	r2, [pc, #192]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	6293      	str	r3, [r2, #40]	; 0x28
	while(!(I2C1->ISR & I2C_ISR_TC));
 8000382:	bf00      	nop
 8000384:	4b2e      	ldr	r3, [pc, #184]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0f9      	beq.n	8000384 <I2C_readNBytesFromAddress+0x84>
	I2C1->CR2 |= I2C_CR2_STOP;
 8000390:	4a2b      	ldr	r2, [pc, #172]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 8000392:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800039a:	6053      	str	r3, [r2, #4]
	while(I2C1->CR2 & I2C_CR2_STOP);
 800039c:	bf00      	nop
 800039e:	4b28      	ldr	r3, [pc, #160]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d1f9      	bne.n	800039e <I2C_readNBytesFromAddress+0x9e>
	I2C1->CR2 = (I2C1->CR2 & 0xFF00FFFF) | (len<<16);
 80003aa:	4925      	ldr	r1, [pc, #148]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 80003ac:	4b24      	ldr	r3, [pc, #144]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80003b4:	797a      	ldrb	r2, [r7, #5]
 80003b6:	0412      	lsls	r2, r2, #16
 80003b8:	4313      	orrs	r3, r2
 80003ba:	604b      	str	r3, [r1, #4]
	I2C1->CR2 |= I2C_CR2_RD_WRN;
 80003bc:	4a20      	ldr	r2, [pc, #128]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 80003be:	4b20      	ldr	r3, [pc, #128]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003c6:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= I2C_CR2_START;
 80003c8:	4a1d      	ldr	r2, [pc, #116]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 80003ca:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003d2:	6053      	str	r3, [r2, #4]
	while(I2C1->CR2 & I2C_CR2_START);
 80003d4:	bf00      	nop
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1f9      	bne.n	80003d6 <I2C_readNBytesFromAddress+0xd6>
	while(len--)
 80003e2:	e00d      	b.n	8000400 <I2C_readNBytesFromAddress+0x100>
	{
		while(!(I2C1->ISR & I2C_ISR_RXNE));
 80003e4:	bf00      	nop
 80003e6:	4b16      	ldr	r3, [pc, #88]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0304 	and.w	r3, r3, #4
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f9      	beq.n	80003e6 <I2C_readNBytesFromAddress+0xe6>
		*data++ = I2C1->RXDR;
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	1c5a      	adds	r2, r3, #1
 80003f6:	60fa      	str	r2, [r7, #12]
 80003f8:	4a11      	ldr	r2, [pc, #68]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 80003fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	701a      	strb	r2, [r3, #0]
	while(len--)
 8000400:	797b      	ldrb	r3, [r7, #5]
 8000402:	1e5a      	subs	r2, r3, #1
 8000404:	717a      	strb	r2, [r7, #5]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1ec      	bne.n	80003e4 <I2C_readNBytesFromAddress+0xe4>
	}
	I2C1->CR2 |= I2C_CR2_STOP;
 800040a:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000414:	6053      	str	r3, [r2, #4]
	while(I2C1->CR2 & I2C_CR2_STOP);
 8000416:	bf00      	nop
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000420:	2b00      	cmp	r3, #0
 8000422:	d1f9      	bne.n	8000418 <I2C_readNBytesFromAddress+0x118>
	I2C1->CR1 &= ~I2C_CR1_PE;
 8000424:	4a06      	ldr	r2, [pc, #24]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <I2C_readNBytesFromAddress+0x140>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f023 0301 	bic.w	r3, r3, #1
 800042e:	6013      	str	r3, [r2, #0]
	return buffer;
 8000430:	683b      	ldr	r3, [r7, #0]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40005400 	.word	0x40005400

08000444 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800044e:	4909      	ldr	r1, [pc, #36]	; (8000474 <NVIC_EnableIRQ+0x30>)
 8000450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000454:	095b      	lsrs	r3, r3, #5
 8000456:	79fa      	ldrb	r2, [r7, #7]
 8000458:	f002 021f 	and.w	r2, r2, #31
 800045c:	2001      	movs	r0, #1
 800045e:	fa00 f202 	lsl.w	r2, r0, r2
 8000462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	e000e100 	.word	0xe000e100

08000478 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8000482:	4909      	ldr	r1, [pc, #36]	; (80004a8 <NVIC_ClearPendingIRQ+0x30>)
 8000484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000488:	095b      	lsrs	r3, r3, #5
 800048a:	79fa      	ldrb	r2, [r7, #7]
 800048c:	f002 021f 	and.w	r2, r2, #31
 8000490:	2001      	movs	r0, #1
 8000492:	fa00 f202 	lsl.w	r2, r0, r2
 8000496:	3360      	adds	r3, #96	; 0x60
 8000498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	e000e100 	.word	0xe000e100

080004ac <PERIPH_USART_Init>:
PERIPH_USART_Instance_t * usart1ObjectPtr = 0;
PERIPH_USART_Instance_t * usart2ObjectPtr = 0;
PERIPH_USART_Instance_t * usart3ObjectPtr = 0;

void PERIPH_USART_Init(USART_TypeDef * usartNo, PERIPH_USART_Instance_t * object, uint32_t baudrate)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
	SystemCoreClockUpdate();
 80004b8:	f000 fb94 	bl	8000be4 <SystemCoreClockUpdate>

	if(usartNo == USART1)
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	4a41      	ldr	r2, [pc, #260]	; (80005c4 <PERIPH_USART_Init+0x118>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d10c      	bne.n	80004de <PERIPH_USART_Init+0x32>
	{
		usart1ObjectPtr = object;
 80004c4:	4a40      	ldr	r2, [pc, #256]	; (80005c8 <PERIPH_USART_Init+0x11c>)
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	6013      	str	r3, [r2, #0]
		object->instance = usartNo;
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	68fa      	ldr	r2, [r7, #12]
 80004ce:	601a      	str	r2, [r3, #0]
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80004d0:	4a3e      	ldr	r2, [pc, #248]	; (80005cc <PERIPH_USART_Init+0x120>)
 80004d2:	4b3e      	ldr	r3, [pc, #248]	; (80005cc <PERIPH_USART_Init+0x120>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	e020      	b.n	8000520 <PERIPH_USART_Init+0x74>
	}
	else if(usartNo == USART2)
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	4a3b      	ldr	r2, [pc, #236]	; (80005d0 <PERIPH_USART_Init+0x124>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d10c      	bne.n	8000500 <PERIPH_USART_Init+0x54>
	{
		usart2ObjectPtr = object;
 80004e6:	4a3b      	ldr	r2, [pc, #236]	; (80005d4 <PERIPH_USART_Init+0x128>)
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	6013      	str	r3, [r2, #0]
		object->instance = usartNo;
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	601a      	str	r2, [r3, #0]
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80004f2:	4a36      	ldr	r2, [pc, #216]	; (80005cc <PERIPH_USART_Init+0x120>)
 80004f4:	4b35      	ldr	r3, [pc, #212]	; (80005cc <PERIPH_USART_Init+0x120>)
 80004f6:	69db      	ldr	r3, [r3, #28]
 80004f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	e00f      	b.n	8000520 <PERIPH_USART_Init+0x74>
}
	else if(usartNo == USART3)
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4a35      	ldr	r2, [pc, #212]	; (80005d8 <PERIPH_USART_Init+0x12c>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d159      	bne.n	80005bc <PERIPH_USART_Init+0x110>
	{
		usart3ObjectPtr = object;
 8000508:	4a34      	ldr	r2, [pc, #208]	; (80005dc <PERIPH_USART_Init+0x130>)
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	6013      	str	r3, [r2, #0]
		object->instance = usartNo;
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	68fa      	ldr	r2, [r7, #12]
 8000512:	601a      	str	r2, [r3, #0]
		RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8000514:	4a2d      	ldr	r2, [pc, #180]	; (80005cc <PERIPH_USART_Init+0x120>)
 8000516:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <PERIPH_USART_Init+0x120>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800051e:	61d3      	str	r3, [r2, #28]
	else
	{
		return;
	}

	uint32_t USARTDIV = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
	USARTDIV = (SystemCoreClock * 2) / baudrate;
 8000524:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <PERIPH_USART_Init+0x134>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	005a      	lsls	r2, r3, #1
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000530:	617b      	str	r3, [r7, #20]
	object->instance->CR1 |= (USART_CR1_OVER8 | USART_CR1_RE | USART_CR1_TE | USART_CR1_RXNEIE);
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000540:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8000544:	6013      	str	r3, [r2, #0]
	object->instance->BRR = ( USARTDIV & 0x0000FFF0);
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	6979      	ldr	r1, [r7, #20]
 800054c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000550:	400b      	ands	r3, r1
 8000552:	60d3      	str	r3, [r2, #12]
	object->instance->BRR |= ((USARTDIV & 0x0000000F)>>1);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	68ba      	ldr	r2, [r7, #8]
 800055a:	6812      	ldr	r2, [r2, #0]
 800055c:	68d1      	ldr	r1, [r2, #12]
 800055e:	697a      	ldr	r2, [r7, #20]
 8000560:	0852      	lsrs	r2, r2, #1
 8000562:	f002 0207 	and.w	r2, r2, #7
 8000566:	430a      	orrs	r2, r1
 8000568:	60da      	str	r2, [r3, #12]
	object->instance->CR1 |= USART_CR1_UE;
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	6812      	ldr	r2, [r2, #0]
 8000574:	f042 0201 	orr.w	r2, r2, #1
 8000578:	601a      	str	r2, [r3, #0]

	if(usartNo == USART1)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <PERIPH_USART_Init+0x118>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d106      	bne.n	8000590 <PERIPH_USART_Init+0xe4>
	{
		NVIC_ClearPendingIRQ(USART1_IRQn);
 8000582:	2025      	movs	r0, #37	; 0x25
 8000584:	f7ff ff78 	bl	8000478 <NVIC_ClearPendingIRQ>
		NVIC_EnableIRQ(USART1_IRQn);
 8000588:	2025      	movs	r0, #37	; 0x25
 800058a:	f7ff ff5b 	bl	8000444 <NVIC_EnableIRQ>
 800058e:	e016      	b.n	80005be <PERIPH_USART_Init+0x112>
	}
	else if(usartNo == USART2)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <PERIPH_USART_Init+0x124>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d106      	bne.n	80005a6 <PERIPH_USART_Init+0xfa>
	{
		NVIC_ClearPendingIRQ(USART2_IRQn);
 8000598:	2026      	movs	r0, #38	; 0x26
 800059a:	f7ff ff6d 	bl	8000478 <NVIC_ClearPendingIRQ>
		NVIC_EnableIRQ(USART2_IRQn);
 800059e:	2026      	movs	r0, #38	; 0x26
 80005a0:	f7ff ff50 	bl	8000444 <NVIC_EnableIRQ>
 80005a4:	e00b      	b.n	80005be <PERIPH_USART_Init+0x112>
	}
	else if(usartNo == USART3)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <PERIPH_USART_Init+0x12c>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d107      	bne.n	80005be <PERIPH_USART_Init+0x112>
	{
		NVIC_ClearPendingIRQ(USART3_IRQn);
 80005ae:	2027      	movs	r0, #39	; 0x27
 80005b0:	f7ff ff62 	bl	8000478 <NVIC_ClearPendingIRQ>
		NVIC_EnableIRQ(USART3_IRQn);
 80005b4:	2027      	movs	r0, #39	; 0x27
 80005b6:	f7ff ff45 	bl	8000444 <NVIC_EnableIRQ>
 80005ba:	e000      	b.n	80005be <PERIPH_USART_Init+0x112>
		return;
 80005bc:	bf00      	nop
	}

}
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40013800 	.word	0x40013800
 80005c8:	20000098 	.word	0x20000098
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40004400 	.word	0x40004400
 80005d4:	2000009c 	.word	0x2000009c
 80005d8:	40004800 	.word	0x40004800
 80005dc:	200000a0 	.word	0x200000a0
 80005e0:	20000004 	.word	0x20000004

080005e4 <PERIPH_USART_GetChar>:

char PERIPH_USART_GetChar(PERIPH_USART_Instance_t * object)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	char data = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73fb      	strb	r3, [r7, #15]

	if(object->usartCircullarBuffertRxHead != object->usartCircullarBuffertRxTail)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d00f      	beq.n	8000620 <PERIPH_USART_GetChar+0x3c>
	{
		object->usartCircullarBuffertRxTail = (object->usartCircullarBuffertRxTail + 1) & PERIPH_USART_CIRCULLAR_BUFFER_RX_MASK;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000606:	3301      	adds	r3, #1
 8000608:	b2da      	uxtb	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		data = object->usartCircullarBuffertRx[object->usartCircullarBuffertRxTail];
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800061e:	73fb      	strb	r3, [r7, #15]
	}

	return data;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <PERIPH_USART_GetString>:

char * PERIPH_USART_GetString(PERIPH_USART_Instance_t * object, char * inOutBuffer)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b084      	sub	sp, #16
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	6039      	str	r1, [r7, #0]
	if(object->usartnoOfReceivedLines)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800063e:	2b00      	cmp	r3, #0
 8000640:	d019      	beq.n	8000676 <PERIPH_USART_GetString+0x48>
	{
		char data = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	72fb      	strb	r3, [r7, #11]
		char * tempBufPtr = inOutBuffer;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	60fb      	str	r3, [r7, #12]
		while((data = PERIPH_USART_GetChar(object)))
 800064a:	e004      	b.n	8000656 <PERIPH_USART_GetString+0x28>
		{
			*tempBufPtr++ = data;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	60fa      	str	r2, [r7, #12]
 8000652:	7afa      	ldrb	r2, [r7, #11]
 8000654:	701a      	strb	r2, [r3, #0]
		while((data = PERIPH_USART_GetChar(object)))
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ffc4 	bl	80005e4 <PERIPH_USART_GetChar>
 800065c:	4603      	mov	r3, r0
 800065e:	72fb      	strb	r3, [r7, #11]
 8000660:	7afb      	ldrb	r3, [r7, #11]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1f2      	bne.n	800064c <PERIPH_USART_GetString+0x1e>
		}
		object->usartnoOfReceivedLines--;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000674:	e002      	b.n	800067c <PERIPH_USART_GetString+0x4e>
	}
	else
	{
		*inOutBuffer = 0;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	return inOutBuffer;
 800067c:	683b      	ldr	r3, [r7, #0]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <PERIPH_USART_RegisterRxCallback>:

void PERIPH_USART_RegisterRxCallback(PERIPH_USART_Instance_t * object , void (*rxCallbackPtr)(void))
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	6039      	str	r1, [r7, #0]
	if(rxCallbackPtr)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d003      	beq.n	800069e <PERIPH_USART_RegisterRxCallback+0x18>
	{
		object->newLineReceivedCallbackPtr = rxCallbackPtr;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	}
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <PERIPH_USART_RXService>:

void PERIPH_USART_RXService(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	if(usart1ObjectPtr && (usart1ObjectPtr->usartnoOfReceivedLines != 0) && (usart1ObjectPtr->newLineReceivedCallbackPtr != 0))
 80006b0:	4b20      	ldr	r3, [pc, #128]	; (8000734 <PERIPH_USART_RXService+0x88>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d010      	beq.n	80006da <PERIPH_USART_RXService+0x2e>
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <PERIPH_USART_RXService+0x88>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00a      	beq.n	80006da <PERIPH_USART_RXService+0x2e>
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <PERIPH_USART_RXService+0x88>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d004      	beq.n	80006da <PERIPH_USART_RXService+0x2e>
	{
		usart1ObjectPtr->newLineReceivedCallbackPtr();
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <PERIPH_USART_RXService+0x88>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80006d8:	4798      	blx	r3
	}
	if(usart2ObjectPtr && (usart2ObjectPtr->usartnoOfReceivedLines != 0) && (usart2ObjectPtr->newLineReceivedCallbackPtr != 0))
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <PERIPH_USART_RXService+0x8c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d010      	beq.n	8000704 <PERIPH_USART_RXService+0x58>
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <PERIPH_USART_RXService+0x8c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d00a      	beq.n	8000704 <PERIPH_USART_RXService+0x58>
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <PERIPH_USART_RXService+0x8c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d004      	beq.n	8000704 <PERIPH_USART_RXService+0x58>
	{
		usart2ObjectPtr->newLineReceivedCallbackPtr();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <PERIPH_USART_RXService+0x8c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000702:	4798      	blx	r3
	}
	if(usart3ObjectPtr && (usart3ObjectPtr->usartnoOfReceivedLines != 0) && (usart3ObjectPtr->newLineReceivedCallbackPtr != 0))
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <PERIPH_USART_RXService+0x90>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d010      	beq.n	800072e <PERIPH_USART_RXService+0x82>
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <PERIPH_USART_RXService+0x90>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00a      	beq.n	800072e <PERIPH_USART_RXService+0x82>
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <PERIPH_USART_RXService+0x90>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000720:	2b00      	cmp	r3, #0
 8000722:	d004      	beq.n	800072e <PERIPH_USART_RXService+0x82>
	{
		usart3ObjectPtr->newLineReceivedCallbackPtr();
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <PERIPH_USART_RXService+0x90>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800072c:	4798      	blx	r3
	}
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000098 	.word	0x20000098
 8000738:	2000009c 	.word	0x2000009c
 800073c:	200000a0 	.word	0x200000a0

08000740 <PERIPH_USART_putc>:

void PERIPH_USART_putc(PERIPH_USART_Instance_t * object, char data)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
	uint32_t tempHead = (object->usartCircullarBuffertTxHead + 1) & PERIPH_USART_CIRCULLAR_BUFFER_TX_MASK;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000752:	3301      	adds	r3, #1
 8000754:	b2db      	uxtb	r3, r3
 8000756:	60fb      	str	r3, [r7, #12]
	if(tempHead == object->usartCircullarBuffertTxTail) return;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	429a      	cmp	r2, r3
 8000762:	d012      	beq.n	800078a <PERIPH_USART_putc+0x4a>
	else
	{
		object->usartCircullarBuffertTx[tempHead] = data;
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	3304      	adds	r3, #4
 800076c:	78fa      	ldrb	r2, [r7, #3]
 800076e:	701a      	strb	r2, [r3, #0]
		object->usartCircullarBuffertTxHead = tempHead;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		object->instance->CR1 |= USART_CR1_TXEIE;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	6812      	ldr	r2, [r2, #0]
 8000782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	e000      	b.n	800078c <PERIPH_USART_putc+0x4c>
	if(tempHead == object->usartCircullarBuffertTxTail) return;
 800078a:	bf00      	nop
	}
}
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <PERIPH_USART_puts>:

void PERIPH_USART_puts(PERIPH_USART_Instance_t * object, char * dataBuffer)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	6039      	str	r1, [r7, #0]
	char data = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	73fb      	strb	r3, [r7, #15]
	while((data = *dataBuffer++))
 80007a4:	e004      	b.n	80007b0 <PERIPH_USART_puts+0x1a>
	{
		PERIPH_USART_putc(object,data);
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4619      	mov	r1, r3
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffc8 	bl	8000740 <PERIPH_USART_putc>
	while((data = *dataBuffer++))
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	603a      	str	r2, [r7, #0]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f2      	bne.n	80007a6 <PERIPH_USART_puts+0x10>
	}
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
	if(usart1ObjectPtr)
 80007ce:	4b50      	ldr	r3, [pc, #320]	; (8000910 <USART1_IRQHandler+0x148>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f000 8096 	beq.w	8000904 <USART1_IRQHandler+0x13c>
	{
		if(usart1ObjectPtr->instance->ISR & USART_ISR_RXNE)
 80007d8:	4b4d      	ldr	r3, [pc, #308]	; (8000910 <USART1_IRQHandler+0x148>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	69db      	ldr	r3, [r3, #28]
 80007e0:	f003 0320 	and.w	r3, r3, #32
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d031      	beq.n	800084c <USART1_IRQHandler+0x84>
		{
			char receivedChar = usart1ObjectPtr->instance->RDR;
 80007e8:	4b49      	ldr	r3, [pc, #292]	; (8000910 <USART1_IRQHandler+0x148>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	71fb      	strb	r3, [r7, #7]
			uint32_t tempHead = (usart1ObjectPtr->usartCircullarBuffertRxHead + 1) & PERIPH_USART_CIRCULLAR_BUFFER_RX_MASK;
 80007f4:	4b46      	ldr	r3, [pc, #280]	; (8000910 <USART1_IRQHandler+0x148>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80007fc:	3301      	adds	r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	603b      	str	r3, [r7, #0]
			if(tempHead == usart1ObjectPtr->usartCircullarBuffertRxTail )
 8000802:	4b43      	ldr	r3, [pc, #268]	; (8000910 <USART1_IRQHandler+0x148>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	429a      	cmp	r2, r3
 800080e:	d078      	beq.n	8000902 <USART1_IRQHandler+0x13a>
			{
				return;
			}
			else
			{
				switch(receivedChar)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b0a      	cmp	r3, #10
 8000814:	d001      	beq.n	800081a <USART1_IRQHandler+0x52>
 8000816:	2b0d      	cmp	r3, #13
 8000818:	d108      	bne.n	800082c <USART1_IRQHandler+0x64>
				{
					case('\r'):
					case('\n'):
					{
						receivedChar = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	71fb      	strb	r3, [r7, #7]
						usart1ObjectPtr->usartnoOfReceivedLines++;
 800081e:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <USART1_IRQHandler+0x148>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000826:	3201      	adds	r2, #1
 8000828:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					}
					default:
						usart1ObjectPtr->usartCircullarBuffertRxHead = tempHead;
 800082c:	4b38      	ldr	r3, [pc, #224]	; (8000910 <USART1_IRQHandler+0x148>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						usart1ObjectPtr->usartCircullarBuffertRx[usart1ObjectPtr->usartCircullarBuffertRxHead] = receivedChar;
 8000836:	4b36      	ldr	r3, [pc, #216]	; (8000910 <USART1_IRQHandler+0x148>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <USART1_IRQHandler+0x148>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000842:	4413      	add	r3, r2
 8000844:	79fa      	ldrb	r2, [r7, #7]
 8000846:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
					break;
 800084a:	bf00      	nop
				}
			}

		}
		if(usart1ObjectPtr->instance->ISR & USART_ISR_TXE)
 800084c:	4b30      	ldr	r3, [pc, #192]	; (8000910 <USART1_IRQHandler+0x148>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	69db      	ldr	r3, [r3, #28]
 8000854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000858:	2b00      	cmp	r3, #0
 800085a:	d035      	beq.n	80008c8 <USART1_IRQHandler+0x100>
		{
			if( usart1ObjectPtr->usartCircullarBuffertTxTail != usart1ObjectPtr->usartCircullarBuffertTxHead )
 800085c:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <USART1_IRQHandler+0x148>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <USART1_IRQHandler+0x148>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800086c:	429a      	cmp	r2, r3
 800086e:	d017      	beq.n	80008a0 <USART1_IRQHandler+0xd8>
			{
				usart1ObjectPtr->usartCircullarBuffertTxTail = (usart1ObjectPtr->usartCircullarBuffertTxTail + 1) & PERIPH_USART_CIRCULLAR_BUFFER_TX_MASK;
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <USART1_IRQHandler+0x148>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a26      	ldr	r2, [pc, #152]	; (8000910 <USART1_IRQHandler+0x148>)
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800087c:	3201      	adds	r2, #1
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				usart1ObjectPtr->instance->TDR  = usart1ObjectPtr->usartCircullarBuffertTx[usart1ObjectPtr->usartCircullarBuffertTxTail];
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <USART1_IRQHandler+0x148>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a21      	ldr	r2, [pc, #132]	; (8000910 <USART1_IRQHandler+0x148>)
 800088c:	6811      	ldr	r1, [r2, #0]
 800088e:	4a20      	ldr	r2, [pc, #128]	; (8000910 <USART1_IRQHandler+0x148>)
 8000890:	6812      	ldr	r2, [r2, #0]
 8000892:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8000896:	440a      	add	r2, r1
 8000898:	7912      	ldrb	r2, [r2, #4]
 800089a:	b292      	uxth	r2, r2
 800089c:	851a      	strh	r2, [r3, #40]	; 0x28
 800089e:	e013      	b.n	80008c8 <USART1_IRQHandler+0x100>
			}
			else
			{
				usart1ObjectPtr->instance->CR1 &= ~USART_CR1_TXEIE;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <USART1_IRQHandler+0x148>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a1a      	ldr	r2, [pc, #104]	; (8000910 <USART1_IRQHandler+0x148>)
 80008a8:	6812      	ldr	r2, [r2, #0]
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008b2:	601a      	str	r2, [r3, #0]
				usart1ObjectPtr->instance->CR1 |= USART_CR1_TCIE;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <USART1_IRQHandler+0x148>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <USART1_IRQHandler+0x148>)
 80008bc:	6812      	ldr	r2, [r2, #0]
 80008be:	6812      	ldr	r2, [r2, #0]
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008c6:	601a      	str	r2, [r3, #0]
			}
		}
		if(usart1ObjectPtr->instance->ISR & USART_ISR_TC)
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <USART1_IRQHandler+0x148>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d015      	beq.n	8000904 <USART1_IRQHandler+0x13c>
		{
			usart1ObjectPtr->instance->CR1 &= ~USART_CR1_TCIE;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <USART1_IRQHandler+0x148>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <USART1_IRQHandler+0x148>)
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80008ea:	601a      	str	r2, [r3, #0]
			usart1ObjectPtr->instance->ICR |= USART_ICR_TCCF;
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <USART1_IRQHandler+0x148>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a07      	ldr	r2, [pc, #28]	; (8000910 <USART1_IRQHandler+0x148>)
 80008f4:	6812      	ldr	r2, [r2, #0]
 80008f6:	6812      	ldr	r2, [r2, #0]
 80008f8:	6a12      	ldr	r2, [r2, #32]
 80008fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008fe:	621a      	str	r2, [r3, #32]
 8000900:	e000      	b.n	8000904 <USART1_IRQHandler+0x13c>
				return;
 8000902:	bf00      	nop
		}
	}
}
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000098 	.word	0x20000098

08000914 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
	asm("NOP");
 8000918:	bf00      	nop
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
	asm("NOP");
 8000928:	bf00      	nop
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	da0b      	bge.n	8000960 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000948:	490d      	ldr	r1, [pc, #52]	; (8000980 <NVIC_SetPriority+0x4c>)
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	3b04      	subs	r3, #4
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800095e:	e009      	b.n	8000974 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000960:	4908      	ldr	r1, [pc, #32]	; (8000984 <NVIC_SetPriority+0x50>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	683a      	ldr	r2, [r7, #0]
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	440b      	add	r3, r1
 8000970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00
 8000984:	e000e100 	.word	0xe000e100

08000988 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000998:	d301      	bcc.n	800099e <SysTick_Config+0x16>
 800099a:	2301      	movs	r3, #1
 800099c:	e00f      	b.n	80009be <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <SysTick_Config+0x40>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80009a6:	210f      	movs	r1, #15
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f7ff ffc2 	bl	8000934 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SysTick_Config+0x40>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <SysTick_Config+0x40>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	e000e010 	.word	0xe000e010

080009cc <SysTick_Handler>:
#include "utils.h"

volatile uint32_t timer = 0;

void SysTick_Handler (void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	if(timer) timer --;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <SysTick_Handler+0x20>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d004      	beq.n	80009e2 <SysTick_Handler+0x16>
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <SysTick_Handler+0x20>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3b01      	subs	r3, #1
 80009de:	4a03      	ldr	r2, [pc, #12]	; (80009ec <SysTick_Handler+0x20>)
 80009e0:	6013      	str	r3, [r2, #0]
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	200000a4 	.word	0x200000a4

080009f0 <USART1_RX_Callback>:

PERIPH_USART_Instance_t usart1 = {0};

void USART1_RX_Callback (void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	char * ptr = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
	ptr = malloc(PERIPH_USART_CIRCULLAR_BUFFER_RX_SIZE);
 80009fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009fe:	f000 fa41 	bl	8000e84 <malloc>
 8000a02:	4603      	mov	r3, r0
 8000a04:	607b      	str	r3, [r7, #4]
	memset(ptr, 0, PERIPH_USART_CIRCULLAR_BUFFER_RX_SIZE);
 8000a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 fa49 	bl	8000ea4 <memset>
	PERIPH_USART_GetString(&usart1,ptr);
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <USART1_RX_Callback+0x40>)
 8000a16:	f7ff fe0a 	bl	800062e <PERIPH_USART_GetString>
	PERIPH_USART_puts(&usart1, ptr);
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <USART1_RX_Callback+0x40>)
 8000a1e:	f7ff feba 	bl	8000796 <PERIPH_USART_puts>
	free(ptr);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 fa36 	bl	8000e94 <free>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000a8 	.word	0x200000a8

08000a34 <i2c_cllback>:

void i2c_cllback (uint8_t address)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	printf("Device found @ addr: 0x%x\r\n", address);
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4619      	mov	r1, r3
 8000a42:	4803      	ldr	r0, [pc, #12]	; (8000a50 <i2c_cllback+0x1c>)
 8000a44:	f000 fae2 	bl	800100c <iprintf>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	08001d28 	.word	0x08001d28

08000a54 <main>:

uint8_t buffer[0x5E] = { 0 };

int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  RCC_Init();
 8000a58:	f000 f99a 	bl	8000d90 <RCC_Init>
  GPIO_init();
 8000a5c:	f000 f94a 	bl	8000cf4 <GPIO_init>
  SysTick_Config(72000000UL / 1000);
 8000a60:	481d      	ldr	r0, [pc, #116]	; (8000ad8 <main+0x84>)
 8000a62:	f7ff ff91 	bl	8000988 <SysTick_Config>
  PERIPH_USART_Init(USART1, &usart1, 115200);
 8000a66:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6a:	491c      	ldr	r1, [pc, #112]	; (8000adc <main+0x88>)
 8000a6c:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <main+0x8c>)
 8000a6e:	f7ff fd1d 	bl	80004ac <PERIPH_USART_Init>
  PERIPH_USART_RegisterRxCallback(&usart1,USART1_RX_Callback);
 8000a72:	491c      	ldr	r1, [pc, #112]	; (8000ae4 <main+0x90>)
 8000a74:	4819      	ldr	r0, [pc, #100]	; (8000adc <main+0x88>)
 8000a76:	f7ff fe06 	bl	8000686 <PERIPH_USART_RegisterRxCallback>

  I2C_init();
 8000a7a:	f7ff fbf9 	bl	8000270 <I2C_init>
  I2C_registerDeviceFoundCallback(i2c_cllback);
 8000a7e:	481a      	ldr	r0, [pc, #104]	; (8000ae8 <main+0x94>)
 8000a80:	f7ff fc2c 	bl	80002dc <I2C_registerDeviceFoundCallback>

  I2C_readNBytesFromAddress(BME280_DEVICE_I2C_ADDRESS,0xD0,buffer,1);
 8000a84:	2301      	movs	r3, #1
 8000a86:	4a19      	ldr	r2, [pc, #100]	; (8000aec <main+0x98>)
 8000a88:	21d0      	movs	r1, #208	; 0xd0
 8000a8a:	2076      	movs	r0, #118	; 0x76
 8000a8c:	f7ff fc38 	bl	8000300 <I2C_readNBytesFromAddress>

  while (1)
  {
	  PERIPH_USART_RXService();
 8000a90:	f7ff fe0c 	bl	80006ac <PERIPH_USART_RXService>

	  if(!timer)
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <main+0x9c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f9      	bne.n	8000a90 <main+0x3c>
	  {
		  static uint32_t shift = 0x0100;
		  timer = 100;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <main+0x9c>)
 8000a9e:	2264      	movs	r2, #100	; 0x64
 8000aa0:	601a      	str	r2, [r3, #0]
		  GPIOE->ODR &= 0x00FF;
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <main+0xa0>)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <main+0xa0>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	6153      	str	r3, [r2, #20]
		  GPIOE->ODR |= shift;
 8000aac:	4911      	ldr	r1, [pc, #68]	; (8000af4 <main+0xa0>)
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <main+0xa0>)
 8000ab0:	695a      	ldr	r2, [r3, #20]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <main+0xa4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	614b      	str	r3, [r1, #20]
		  shift <<= 1;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <main+0xa4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <main+0xa4>)
 8000ac2:	6013      	str	r3, [r2, #0]
		  if(shift == 0x10000) shift = 0x0100;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <main+0xa4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000acc:	d1e0      	bne.n	8000a90 <main+0x3c>
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <main+0xa4>)
 8000ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ad4:	601a      	str	r2, [r3, #0]
	  PERIPH_USART_RXService();
 8000ad6:	e7db      	b.n	8000a90 <main+0x3c>
 8000ad8:	00011940 	.word	0x00011940
 8000adc:	200000a8 	.word	0x200000a8
 8000ae0:	40013800 	.word	0x40013800
 8000ae4:	080009f1 	.word	0x080009f1
 8000ae8:	08000a35 	.word	0x08000a35
 8000aec:	200002c4 	.word	0x200002c4
 8000af0:	200000a4 	.word	0x200000a4
 8000af4:	48001000 	.word	0x48001000
 8000af8:	20000000 	.word	0x20000000

08000afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b02:	e003      	b.n	8000b0c <LoopCopyDataInit>

08000b04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b0a:	3104      	adds	r1, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b0c:	480b      	ldr	r0, [pc, #44]	; (8000b3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b14:	d3f6      	bcc.n	8000b04 <CopyDataInit>
	ldr	r2, =_sbss
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b18:	e002      	b.n	8000b20 <LoopFillZerobss>

08000b1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b1c:	f842 3b04 	str.w	r3, [r2], #4

08000b20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <LoopForever+0x16>)
	cmp	r2, r3
 8000b22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b24:	d3f9      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b26:	f000 f813 	bl	8000b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f000 f987 	bl	8000e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2e:	f7ff ff91 	bl	8000a54 <main>

08000b32 <LoopForever>:

LoopForever:
    b LoopForever
 8000b32:	e7fe      	b.n	8000b32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b34:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000b38:	08001de4 	.word	0x08001de4
	ldr	r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b40:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8000b44:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8000b48:	20000338 	.word	0x20000338

08000b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_2_IRQHandler>
	...

08000b50 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <SystemInit+0x84>)
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <SystemInit+0x84>)
 8000b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b64:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <SystemInit+0x88>)
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <SystemInit+0x88>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000b70:	4919      	ldr	r1, [pc, #100]	; (8000bd8 <SystemInit+0x88>)
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <SystemInit+0x88>)
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <SystemInit+0x8c>)
 8000b78:	4013      	ands	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b7c:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <SystemInit+0x88>)
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <SystemInit+0x88>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b8a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b8c:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <SystemInit+0x88>)
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <SystemInit+0x88>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b96:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000b98:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <SystemInit+0x88>)
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <SystemInit+0x88>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ba2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000ba4:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <SystemInit+0x88>)
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <SystemInit+0x88>)
 8000ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000baa:	f023 030f 	bic.w	r3, r3, #15
 8000bae:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000bb0:	4909      	ldr	r1, [pc, #36]	; (8000bd8 <SystemInit+0x88>)
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <SystemInit+0x88>)
 8000bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <SystemInit+0x90>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x88>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SystemInit+0x84>)
 8000bc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bc8:	609a      	str	r2, [r3, #8]
#endif
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	f87fc00c 	.word	0xf87fc00c
 8000be0:	ff00fccc 	.word	0xff00fccc

08000be4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <SystemCoreClockUpdate+0xc4>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	d007      	beq.n	8000c1a <SystemCoreClockUpdate+0x36>
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	d009      	beq.n	8000c22 <SystemCoreClockUpdate+0x3e>
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d12f      	bne.n	8000c72 <SystemCoreClockUpdate+0x8e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c14:	4a26      	ldr	r2, [pc, #152]	; (8000cb0 <SystemCoreClockUpdate+0xcc>)
 8000c16:	601a      	str	r2, [r3, #0]
      break;
 8000c18:	e02f      	b.n	8000c7a <SystemCoreClockUpdate+0x96>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c1c:	4a24      	ldr	r2, [pc, #144]	; (8000cb0 <SystemCoreClockUpdate+0xcc>)
 8000c1e:	601a      	str	r2, [r3, #0]
      break;
 8000c20:	e02b      	b.n	8000c7a <SystemCoreClockUpdate+0x96>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <SystemCoreClockUpdate+0xc4>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000c2a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <SystemCoreClockUpdate+0xc4>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c34:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	0c9b      	lsrs	r3, r3, #18
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	60bb      	str	r3, [r7, #8]

      if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d106      	bne.n	8000c52 <SystemCoreClockUpdate+0x6e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <SystemCoreClockUpdate+0xd0>)
 8000c48:	fb02 f303 	mul.w	r3, r2, r3
 8000c4c:	4a17      	ldr	r2, [pc, #92]	; (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c4e:	6013      	str	r3, [r2, #0]
      {
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
      }
      break;
 8000c50:	e013      	b.n	8000c7a <SystemCoreClockUpdate+0x96>
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <SystemCoreClockUpdate+0xc4>)
 8000c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <SystemCoreClockUpdate+0xcc>)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	fb02 f303 	mul.w	r3, r2, r3
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c6e:	6013      	str	r3, [r2, #0]
      break;
 8000c70:	e003      	b.n	8000c7a <SystemCoreClockUpdate+0x96>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <SystemCoreClockUpdate+0xcc>)
 8000c76:	601a      	str	r2, [r3, #0]
      break;
 8000c78:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <SystemCoreClockUpdate+0xc4>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	091b      	lsrs	r3, r3, #4
 8000c80:	f003 030f 	and.w	r3, r3, #15
 8000c84:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <SystemCoreClockUpdate+0xd4>)
 8000c86:	5cd3      	ldrb	r3, [r2, r3]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	fa22 f303 	lsr.w	r3, r2, r3
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemCoreClockUpdate+0xc8>)
 8000c98:	6013      	str	r3, [r2, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	007a1200 	.word	0x007a1200
 8000cb4:	003d0900 	.word	0x003d0900
 8000cb8:	20000008 	.word	0x20000008

08000cbc <_write>:
#include "../Drivers/PERIPHERALS/inc/stm32f303_uart.h"

extern PERIPH_USART_Instance_t usart1;

int _write(int file, char *data, int len)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
	while(len--)
 8000cc8:	e007      	b.n	8000cda <_write+0x1e>
	{
		PERIPH_USART_putc(&usart1, *data++);
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	60ba      	str	r2, [r7, #8]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <_write+0x34>)
 8000cd6:	f7ff fd33 	bl	8000740 <PERIPH_USART_putc>
	while(len--)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	607a      	str	r2, [r7, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1f2      	bne.n	8000cca <_write+0xe>
	}

	return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000a8 	.word	0x200000a8

08000cf4 <GPIO_init>:

void GPIO_init()
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <GPIO_init+0x90>)
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <GPIO_init+0x90>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d02:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000d04:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <GPIO_init+0x90>)
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <GPIO_init+0x90>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0e:	6153      	str	r3, [r2, #20]
	GPIOE->MODER |= 0x55550000;
 8000d10:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <GPIO_init+0x94>)
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <GPIO_init+0x94>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000d1a:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000d1e:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR |= 0xFFFF0000;
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <GPIO_init+0x94>)
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <GPIO_init+0x94>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8000d2a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8000d2e:	6093      	str	r3, [r2, #8]
	GPIOE->ODR |= 0xFF00;
 8000d30:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <GPIO_init+0x94>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <GPIO_init+0x94>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000d3a:	6153      	str	r3, [r2, #20]

	//USART1 gpio configuration
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000d3c:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <GPIO_init+0x90>)
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <GPIO_init+0x90>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d46:	6153      	str	r3, [r2, #20]
	GPIOC->MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1;
 8000d48:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <GPIO_init+0x98>)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <GPIO_init+0x98>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000d52:	6013      	str	r3, [r2, #0]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4;
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <GPIO_init+0x98>)
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <GPIO_init+0x98>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d5e:	6093      	str	r3, [r2, #8]
	GPIOC->AFR[0] &= ~GPIO_AFRL_AFRL7;
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <GPIO_init+0x98>)
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <GPIO_init+0x98>)
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d6a:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (7<<16) | (7<<20);
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <GPIO_init+0x98>)
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <GPIO_init+0x98>)
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	f443 03ee 	orr.w	r3, r3, #7798784	; 0x770000
 8000d76:	6213      	str	r3, [r2, #32]


}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48001000 	.word	0x48001000
 8000d8c:	48000800 	.word	0x48000800

08000d90 <RCC_Init>:

void RCC_Init(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	RCC->CR &= ~RCC_CR_HSEON;
 8000d94:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <RCC_Init+0xa4>)
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <RCC_Init+0xa4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9e:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEBYP;
 8000da0:	4a24      	ldr	r2, [pc, #144]	; (8000e34 <RCC_Init+0xa4>)
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <RCC_Init+0xa4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000daa:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON;
 8000dac:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <RCC_Init+0xa4>)
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <RCC_Init+0xa4>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000db8:	bf00      	nop
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <RCC_Init+0xa4>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f9      	beq.n	8000dba <RCC_Init+0x2a>
	RCC->CFGR |= RCC_CFGR_PLLMUL9;
 8000dc6:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <RCC_Init+0xa4>)
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <RCC_Init+0xa4>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000dd0:	6053      	str	r3, [r2, #4]
	RCC->CFGR2 &= ~RCC_CFGR2_PREDIV;
 8000dd2:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <RCC_Init+0xa4>)
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <RCC_Init+0xa4>)
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	f023 030f 	bic.w	r3, r3, #15
 8000ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR |= (1<<16);
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <RCC_Init+0xa4>)
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <RCC_Init+0xa4>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de8:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <RCC_Init+0xa4>)
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <RCC_Init+0xa4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000df4:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000df6:	bf00      	nop
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <RCC_Init+0xa4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0f9      	beq.n	8000df8 <RCC_Init+0x68>
	FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000e04:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <RCC_Init+0xa8>)
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <RCC_Init+0xa8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <RCC_Init+0xa4>)
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <RCC_Init+0xa4>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000e1c:	bf00      	nop
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <RCC_Init+0xa4>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0f9      	beq.n	8000e1e <RCC_Init+0x8e>
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40022000 	.word	0x40022000

08000e3c <__libc_init_array>:
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	4e0d      	ldr	r6, [pc, #52]	; (8000e74 <__libc_init_array+0x38>)
 8000e40:	4c0d      	ldr	r4, [pc, #52]	; (8000e78 <__libc_init_array+0x3c>)
 8000e42:	1ba4      	subs	r4, r4, r6
 8000e44:	10a4      	asrs	r4, r4, #2
 8000e46:	2500      	movs	r5, #0
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	d109      	bne.n	8000e60 <__libc_init_array+0x24>
 8000e4c:	4e0b      	ldr	r6, [pc, #44]	; (8000e7c <__libc_init_array+0x40>)
 8000e4e:	4c0c      	ldr	r4, [pc, #48]	; (8000e80 <__libc_init_array+0x44>)
 8000e50:	f000 ff5e 	bl	8001d10 <_init>
 8000e54:	1ba4      	subs	r4, r4, r6
 8000e56:	10a4      	asrs	r4, r4, #2
 8000e58:	2500      	movs	r5, #0
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	d105      	bne.n	8000e6a <__libc_init_array+0x2e>
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}
 8000e60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e64:	4798      	blx	r3
 8000e66:	3501      	adds	r5, #1
 8000e68:	e7ee      	b.n	8000e48 <__libc_init_array+0xc>
 8000e6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e6e:	4798      	blx	r3
 8000e70:	3501      	adds	r5, #1
 8000e72:	e7f2      	b.n	8000e5a <__libc_init_array+0x1e>
 8000e74:	08001ddc 	.word	0x08001ddc
 8000e78:	08001ddc 	.word	0x08001ddc
 8000e7c:	08001ddc 	.word	0x08001ddc
 8000e80:	08001de0 	.word	0x08001de0

08000e84 <malloc>:
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <malloc+0xc>)
 8000e86:	4601      	mov	r1, r0
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	f000 b861 	b.w	8000f50 <_malloc_r>
 8000e8e:	bf00      	nop
 8000e90:	20000018 	.word	0x20000018

08000e94 <free>:
 8000e94:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <free+0xc>)
 8000e96:	4601      	mov	r1, r0
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	f000 b80b 	b.w	8000eb4 <_free_r>
 8000e9e:	bf00      	nop
 8000ea0:	20000018 	.word	0x20000018

08000ea4 <memset>:
 8000ea4:	4402      	add	r2, r0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d100      	bne.n	8000eae <memset+0xa>
 8000eac:	4770      	bx	lr
 8000eae:	f803 1b01 	strb.w	r1, [r3], #1
 8000eb2:	e7f9      	b.n	8000ea8 <memset+0x4>

08000eb4 <_free_r>:
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	4605      	mov	r5, r0
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d045      	beq.n	8000f48 <_free_r+0x94>
 8000ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ec0:	1f0c      	subs	r4, r1, #4
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bfb8      	it	lt
 8000ec6:	18e4      	addlt	r4, r4, r3
 8000ec8:	f000 f992 	bl	80011f0 <__malloc_lock>
 8000ecc:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <_free_r+0x98>)
 8000ece:	6813      	ldr	r3, [r2, #0]
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	b933      	cbnz	r3, 8000ee2 <_free_r+0x2e>
 8000ed4:	6063      	str	r3, [r4, #4]
 8000ed6:	6014      	str	r4, [r2, #0]
 8000ed8:	4628      	mov	r0, r5
 8000eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ede:	f000 b988 	b.w	80011f2 <__malloc_unlock>
 8000ee2:	42a3      	cmp	r3, r4
 8000ee4:	d90c      	bls.n	8000f00 <_free_r+0x4c>
 8000ee6:	6821      	ldr	r1, [r4, #0]
 8000ee8:	1862      	adds	r2, r4, r1
 8000eea:	4293      	cmp	r3, r2
 8000eec:	bf04      	itt	eq
 8000eee:	681a      	ldreq	r2, [r3, #0]
 8000ef0:	685b      	ldreq	r3, [r3, #4]
 8000ef2:	6063      	str	r3, [r4, #4]
 8000ef4:	bf04      	itt	eq
 8000ef6:	1852      	addeq	r2, r2, r1
 8000ef8:	6022      	streq	r2, [r4, #0]
 8000efa:	6004      	str	r4, [r0, #0]
 8000efc:	e7ec      	b.n	8000ed8 <_free_r+0x24>
 8000efe:	4613      	mov	r3, r2
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	b10a      	cbz	r2, 8000f08 <_free_r+0x54>
 8000f04:	42a2      	cmp	r2, r4
 8000f06:	d9fa      	bls.n	8000efe <_free_r+0x4a>
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	1858      	adds	r0, r3, r1
 8000f0c:	42a0      	cmp	r0, r4
 8000f0e:	d10b      	bne.n	8000f28 <_free_r+0x74>
 8000f10:	6820      	ldr	r0, [r4, #0]
 8000f12:	4401      	add	r1, r0
 8000f14:	1858      	adds	r0, r3, r1
 8000f16:	4282      	cmp	r2, r0
 8000f18:	6019      	str	r1, [r3, #0]
 8000f1a:	d1dd      	bne.n	8000ed8 <_free_r+0x24>
 8000f1c:	6810      	ldr	r0, [r2, #0]
 8000f1e:	6852      	ldr	r2, [r2, #4]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	4401      	add	r1, r0
 8000f24:	6019      	str	r1, [r3, #0]
 8000f26:	e7d7      	b.n	8000ed8 <_free_r+0x24>
 8000f28:	d902      	bls.n	8000f30 <_free_r+0x7c>
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	602b      	str	r3, [r5, #0]
 8000f2e:	e7d3      	b.n	8000ed8 <_free_r+0x24>
 8000f30:	6820      	ldr	r0, [r4, #0]
 8000f32:	1821      	adds	r1, r4, r0
 8000f34:	428a      	cmp	r2, r1
 8000f36:	bf04      	itt	eq
 8000f38:	6811      	ldreq	r1, [r2, #0]
 8000f3a:	6852      	ldreq	r2, [r2, #4]
 8000f3c:	6062      	str	r2, [r4, #4]
 8000f3e:	bf04      	itt	eq
 8000f40:	1809      	addeq	r1, r1, r0
 8000f42:	6021      	streq	r1, [r4, #0]
 8000f44:	605c      	str	r4, [r3, #4]
 8000f46:	e7c7      	b.n	8000ed8 <_free_r+0x24>
 8000f48:	bd38      	pop	{r3, r4, r5, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000324 	.word	0x20000324

08000f50 <_malloc_r>:
 8000f50:	b570      	push	{r4, r5, r6, lr}
 8000f52:	1ccd      	adds	r5, r1, #3
 8000f54:	f025 0503 	bic.w	r5, r5, #3
 8000f58:	3508      	adds	r5, #8
 8000f5a:	2d0c      	cmp	r5, #12
 8000f5c:	bf38      	it	cc
 8000f5e:	250c      	movcc	r5, #12
 8000f60:	2d00      	cmp	r5, #0
 8000f62:	4606      	mov	r6, r0
 8000f64:	db01      	blt.n	8000f6a <_malloc_r+0x1a>
 8000f66:	42a9      	cmp	r1, r5
 8000f68:	d903      	bls.n	8000f72 <_malloc_r+0x22>
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	6033      	str	r3, [r6, #0]
 8000f6e:	2000      	movs	r0, #0
 8000f70:	bd70      	pop	{r4, r5, r6, pc}
 8000f72:	f000 f93d 	bl	80011f0 <__malloc_lock>
 8000f76:	4a23      	ldr	r2, [pc, #140]	; (8001004 <_malloc_r+0xb4>)
 8000f78:	6814      	ldr	r4, [r2, #0]
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	b991      	cbnz	r1, 8000fa4 <_malloc_r+0x54>
 8000f7e:	4c22      	ldr	r4, [pc, #136]	; (8001008 <_malloc_r+0xb8>)
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	b91b      	cbnz	r3, 8000f8c <_malloc_r+0x3c>
 8000f84:	4630      	mov	r0, r6
 8000f86:	f000 f859 	bl	800103c <_sbrk_r>
 8000f8a:	6020      	str	r0, [r4, #0]
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	4630      	mov	r0, r6
 8000f90:	f000 f854 	bl	800103c <_sbrk_r>
 8000f94:	1c43      	adds	r3, r0, #1
 8000f96:	d126      	bne.n	8000fe6 <_malloc_r+0x96>
 8000f98:	230c      	movs	r3, #12
 8000f9a:	6033      	str	r3, [r6, #0]
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	f000 f928 	bl	80011f2 <__malloc_unlock>
 8000fa2:	e7e4      	b.n	8000f6e <_malloc_r+0x1e>
 8000fa4:	680b      	ldr	r3, [r1, #0]
 8000fa6:	1b5b      	subs	r3, r3, r5
 8000fa8:	d41a      	bmi.n	8000fe0 <_malloc_r+0x90>
 8000faa:	2b0b      	cmp	r3, #11
 8000fac:	d90f      	bls.n	8000fce <_malloc_r+0x7e>
 8000fae:	600b      	str	r3, [r1, #0]
 8000fb0:	50cd      	str	r5, [r1, r3]
 8000fb2:	18cc      	adds	r4, r1, r3
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	f000 f91c 	bl	80011f2 <__malloc_unlock>
 8000fba:	f104 000b 	add.w	r0, r4, #11
 8000fbe:	1d23      	adds	r3, r4, #4
 8000fc0:	f020 0007 	bic.w	r0, r0, #7
 8000fc4:	1ac3      	subs	r3, r0, r3
 8000fc6:	d01b      	beq.n	8001000 <_malloc_r+0xb0>
 8000fc8:	425a      	negs	r2, r3
 8000fca:	50e2      	str	r2, [r4, r3]
 8000fcc:	bd70      	pop	{r4, r5, r6, pc}
 8000fce:	428c      	cmp	r4, r1
 8000fd0:	bf0d      	iteet	eq
 8000fd2:	6863      	ldreq	r3, [r4, #4]
 8000fd4:	684b      	ldrne	r3, [r1, #4]
 8000fd6:	6063      	strne	r3, [r4, #4]
 8000fd8:	6013      	streq	r3, [r2, #0]
 8000fda:	bf18      	it	ne
 8000fdc:	460c      	movne	r4, r1
 8000fde:	e7e9      	b.n	8000fb4 <_malloc_r+0x64>
 8000fe0:	460c      	mov	r4, r1
 8000fe2:	6849      	ldr	r1, [r1, #4]
 8000fe4:	e7ca      	b.n	8000f7c <_malloc_r+0x2c>
 8000fe6:	1cc4      	adds	r4, r0, #3
 8000fe8:	f024 0403 	bic.w	r4, r4, #3
 8000fec:	42a0      	cmp	r0, r4
 8000fee:	d005      	beq.n	8000ffc <_malloc_r+0xac>
 8000ff0:	1a21      	subs	r1, r4, r0
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	f000 f822 	bl	800103c <_sbrk_r>
 8000ff8:	3001      	adds	r0, #1
 8000ffa:	d0cd      	beq.n	8000f98 <_malloc_r+0x48>
 8000ffc:	6025      	str	r5, [r4, #0]
 8000ffe:	e7d9      	b.n	8000fb4 <_malloc_r+0x64>
 8001000:	bd70      	pop	{r4, r5, r6, pc}
 8001002:	bf00      	nop
 8001004:	20000324 	.word	0x20000324
 8001008:	20000328 	.word	0x20000328

0800100c <iprintf>:
 800100c:	b40f      	push	{r0, r1, r2, r3}
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <iprintf+0x2c>)
 8001010:	b513      	push	{r0, r1, r4, lr}
 8001012:	681c      	ldr	r4, [r3, #0]
 8001014:	b124      	cbz	r4, 8001020 <iprintf+0x14>
 8001016:	69a3      	ldr	r3, [r4, #24]
 8001018:	b913      	cbnz	r3, 8001020 <iprintf+0x14>
 800101a:	4620      	mov	r0, r4
 800101c:	f000 f85e 	bl	80010dc <__sinit>
 8001020:	ab05      	add	r3, sp, #20
 8001022:	9a04      	ldr	r2, [sp, #16]
 8001024:	68a1      	ldr	r1, [r4, #8]
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	4620      	mov	r0, r4
 800102a:	f000 f90d 	bl	8001248 <_vfiprintf_r>
 800102e:	b002      	add	sp, #8
 8001030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001034:	b004      	add	sp, #16
 8001036:	4770      	bx	lr
 8001038:	20000018 	.word	0x20000018

0800103c <_sbrk_r>:
 800103c:	b538      	push	{r3, r4, r5, lr}
 800103e:	4c06      	ldr	r4, [pc, #24]	; (8001058 <_sbrk_r+0x1c>)
 8001040:	2300      	movs	r3, #0
 8001042:	4605      	mov	r5, r0
 8001044:	4608      	mov	r0, r1
 8001046:	6023      	str	r3, [r4, #0]
 8001048:	f000 fe54 	bl	8001cf4 <_sbrk>
 800104c:	1c43      	adds	r3, r0, #1
 800104e:	d102      	bne.n	8001056 <_sbrk_r+0x1a>
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	b103      	cbz	r3, 8001056 <_sbrk_r+0x1a>
 8001054:	602b      	str	r3, [r5, #0]
 8001056:	bd38      	pop	{r3, r4, r5, pc}
 8001058:	20000334 	.word	0x20000334

0800105c <_cleanup_r>:
 800105c:	4901      	ldr	r1, [pc, #4]	; (8001064 <_cleanup_r+0x8>)
 800105e:	f000 b8a9 	b.w	80011b4 <_fwalk_reent>
 8001062:	bf00      	nop
 8001064:	08001afd 	.word	0x08001afd

08001068 <std.isra.0>:
 8001068:	2300      	movs	r3, #0
 800106a:	b510      	push	{r4, lr}
 800106c:	4604      	mov	r4, r0
 800106e:	6003      	str	r3, [r0, #0]
 8001070:	6043      	str	r3, [r0, #4]
 8001072:	6083      	str	r3, [r0, #8]
 8001074:	8181      	strh	r1, [r0, #12]
 8001076:	6643      	str	r3, [r0, #100]	; 0x64
 8001078:	81c2      	strh	r2, [r0, #14]
 800107a:	6103      	str	r3, [r0, #16]
 800107c:	6143      	str	r3, [r0, #20]
 800107e:	6183      	str	r3, [r0, #24]
 8001080:	4619      	mov	r1, r3
 8001082:	2208      	movs	r2, #8
 8001084:	305c      	adds	r0, #92	; 0x5c
 8001086:	f7ff ff0d 	bl	8000ea4 <memset>
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <std.isra.0+0x38>)
 800108c:	6263      	str	r3, [r4, #36]	; 0x24
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <std.isra.0+0x3c>)
 8001090:	62a3      	str	r3, [r4, #40]	; 0x28
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <std.isra.0+0x40>)
 8001094:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <std.isra.0+0x44>)
 8001098:	6224      	str	r4, [r4, #32]
 800109a:	6323      	str	r3, [r4, #48]	; 0x30
 800109c:	bd10      	pop	{r4, pc}
 800109e:	bf00      	nop
 80010a0:	080017a1 	.word	0x080017a1
 80010a4:	080017c3 	.word	0x080017c3
 80010a8:	080017fb 	.word	0x080017fb
 80010ac:	0800181f 	.word	0x0800181f

080010b0 <__sfmoreglue>:
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	1e4a      	subs	r2, r1, #1
 80010b4:	2568      	movs	r5, #104	; 0x68
 80010b6:	4355      	muls	r5, r2
 80010b8:	460e      	mov	r6, r1
 80010ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80010be:	f7ff ff47 	bl	8000f50 <_malloc_r>
 80010c2:	4604      	mov	r4, r0
 80010c4:	b140      	cbz	r0, 80010d8 <__sfmoreglue+0x28>
 80010c6:	2100      	movs	r1, #0
 80010c8:	e880 0042 	stmia.w	r0, {r1, r6}
 80010cc:	300c      	adds	r0, #12
 80010ce:	60a0      	str	r0, [r4, #8]
 80010d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80010d4:	f7ff fee6 	bl	8000ea4 <memset>
 80010d8:	4620      	mov	r0, r4
 80010da:	bd70      	pop	{r4, r5, r6, pc}

080010dc <__sinit>:
 80010dc:	6983      	ldr	r3, [r0, #24]
 80010de:	b510      	push	{r4, lr}
 80010e0:	4604      	mov	r4, r0
 80010e2:	bb33      	cbnz	r3, 8001132 <__sinit+0x56>
 80010e4:	6483      	str	r3, [r0, #72]	; 0x48
 80010e6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80010e8:	6503      	str	r3, [r0, #80]	; 0x50
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <__sinit+0x58>)
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <__sinit+0x5c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6282      	str	r2, [r0, #40]	; 0x28
 80010f2:	4298      	cmp	r0, r3
 80010f4:	bf04      	itt	eq
 80010f6:	2301      	moveq	r3, #1
 80010f8:	6183      	streq	r3, [r0, #24]
 80010fa:	f000 f81f 	bl	800113c <__sfp>
 80010fe:	6060      	str	r0, [r4, #4]
 8001100:	4620      	mov	r0, r4
 8001102:	f000 f81b 	bl	800113c <__sfp>
 8001106:	60a0      	str	r0, [r4, #8]
 8001108:	4620      	mov	r0, r4
 800110a:	f000 f817 	bl	800113c <__sfp>
 800110e:	2200      	movs	r2, #0
 8001110:	60e0      	str	r0, [r4, #12]
 8001112:	2104      	movs	r1, #4
 8001114:	6860      	ldr	r0, [r4, #4]
 8001116:	f7ff ffa7 	bl	8001068 <std.isra.0>
 800111a:	2201      	movs	r2, #1
 800111c:	2109      	movs	r1, #9
 800111e:	68a0      	ldr	r0, [r4, #8]
 8001120:	f7ff ffa2 	bl	8001068 <std.isra.0>
 8001124:	2202      	movs	r2, #2
 8001126:	2112      	movs	r1, #18
 8001128:	68e0      	ldr	r0, [r4, #12]
 800112a:	f7ff ff9d 	bl	8001068 <std.isra.0>
 800112e:	2301      	movs	r3, #1
 8001130:	61a3      	str	r3, [r4, #24]
 8001132:	bd10      	pop	{r4, pc}
 8001134:	08001da4 	.word	0x08001da4
 8001138:	0800105d 	.word	0x0800105d

0800113c <__sfp>:
 800113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <__sfp+0x74>)
 8001140:	681e      	ldr	r6, [r3, #0]
 8001142:	69b3      	ldr	r3, [r6, #24]
 8001144:	4607      	mov	r7, r0
 8001146:	b913      	cbnz	r3, 800114e <__sfp+0x12>
 8001148:	4630      	mov	r0, r6
 800114a:	f7ff ffc7 	bl	80010dc <__sinit>
 800114e:	3648      	adds	r6, #72	; 0x48
 8001150:	68b4      	ldr	r4, [r6, #8]
 8001152:	6873      	ldr	r3, [r6, #4]
 8001154:	3b01      	subs	r3, #1
 8001156:	d503      	bpl.n	8001160 <__sfp+0x24>
 8001158:	6833      	ldr	r3, [r6, #0]
 800115a:	b133      	cbz	r3, 800116a <__sfp+0x2e>
 800115c:	6836      	ldr	r6, [r6, #0]
 800115e:	e7f7      	b.n	8001150 <__sfp+0x14>
 8001160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001164:	b16d      	cbz	r5, 8001182 <__sfp+0x46>
 8001166:	3468      	adds	r4, #104	; 0x68
 8001168:	e7f4      	b.n	8001154 <__sfp+0x18>
 800116a:	2104      	movs	r1, #4
 800116c:	4638      	mov	r0, r7
 800116e:	f7ff ff9f 	bl	80010b0 <__sfmoreglue>
 8001172:	6030      	str	r0, [r6, #0]
 8001174:	2800      	cmp	r0, #0
 8001176:	d1f1      	bne.n	800115c <__sfp+0x20>
 8001178:	230c      	movs	r3, #12
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	4604      	mov	r4, r0
 800117e:	4620      	mov	r0, r4
 8001180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001186:	81e3      	strh	r3, [r4, #14]
 8001188:	2301      	movs	r3, #1
 800118a:	81a3      	strh	r3, [r4, #12]
 800118c:	6665      	str	r5, [r4, #100]	; 0x64
 800118e:	6025      	str	r5, [r4, #0]
 8001190:	60a5      	str	r5, [r4, #8]
 8001192:	6065      	str	r5, [r4, #4]
 8001194:	6125      	str	r5, [r4, #16]
 8001196:	6165      	str	r5, [r4, #20]
 8001198:	61a5      	str	r5, [r4, #24]
 800119a:	2208      	movs	r2, #8
 800119c:	4629      	mov	r1, r5
 800119e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80011a2:	f7ff fe7f 	bl	8000ea4 <memset>
 80011a6:	6365      	str	r5, [r4, #52]	; 0x34
 80011a8:	63a5      	str	r5, [r4, #56]	; 0x38
 80011aa:	64a5      	str	r5, [r4, #72]	; 0x48
 80011ac:	64e5      	str	r5, [r4, #76]	; 0x4c
 80011ae:	e7e6      	b.n	800117e <__sfp+0x42>
 80011b0:	08001da4 	.word	0x08001da4

080011b4 <_fwalk_reent>:
 80011b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011b8:	4680      	mov	r8, r0
 80011ba:	4689      	mov	r9, r1
 80011bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80011c0:	2600      	movs	r6, #0
 80011c2:	b914      	cbnz	r4, 80011ca <_fwalk_reent+0x16>
 80011c4:	4630      	mov	r0, r6
 80011c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011ca:	68a5      	ldr	r5, [r4, #8]
 80011cc:	6867      	ldr	r7, [r4, #4]
 80011ce:	3f01      	subs	r7, #1
 80011d0:	d501      	bpl.n	80011d6 <_fwalk_reent+0x22>
 80011d2:	6824      	ldr	r4, [r4, #0]
 80011d4:	e7f5      	b.n	80011c2 <_fwalk_reent+0xe>
 80011d6:	89ab      	ldrh	r3, [r5, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d907      	bls.n	80011ec <_fwalk_reent+0x38>
 80011dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80011e0:	3301      	adds	r3, #1
 80011e2:	d003      	beq.n	80011ec <_fwalk_reent+0x38>
 80011e4:	4629      	mov	r1, r5
 80011e6:	4640      	mov	r0, r8
 80011e8:	47c8      	blx	r9
 80011ea:	4306      	orrs	r6, r0
 80011ec:	3568      	adds	r5, #104	; 0x68
 80011ee:	e7ee      	b.n	80011ce <_fwalk_reent+0x1a>

080011f0 <__malloc_lock>:
 80011f0:	4770      	bx	lr

080011f2 <__malloc_unlock>:
 80011f2:	4770      	bx	lr

080011f4 <__sfputc_r>:
 80011f4:	6893      	ldr	r3, [r2, #8]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	b410      	push	{r4}
 80011fc:	6093      	str	r3, [r2, #8]
 80011fe:	da09      	bge.n	8001214 <__sfputc_r+0x20>
 8001200:	6994      	ldr	r4, [r2, #24]
 8001202:	42a3      	cmp	r3, r4
 8001204:	db02      	blt.n	800120c <__sfputc_r+0x18>
 8001206:	b2cb      	uxtb	r3, r1
 8001208:	2b0a      	cmp	r3, #10
 800120a:	d103      	bne.n	8001214 <__sfputc_r+0x20>
 800120c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001210:	f000 bb0a 	b.w	8001828 <__swbuf_r>
 8001214:	6813      	ldr	r3, [r2, #0]
 8001216:	1c58      	adds	r0, r3, #1
 8001218:	6010      	str	r0, [r2, #0]
 800121a:	7019      	strb	r1, [r3, #0]
 800121c:	b2c8      	uxtb	r0, r1
 800121e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001222:	4770      	bx	lr

08001224 <__sfputs_r>:
 8001224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001226:	4606      	mov	r6, r0
 8001228:	460f      	mov	r7, r1
 800122a:	4614      	mov	r4, r2
 800122c:	18d5      	adds	r5, r2, r3
 800122e:	42ac      	cmp	r4, r5
 8001230:	d101      	bne.n	8001236 <__sfputs_r+0x12>
 8001232:	2000      	movs	r0, #0
 8001234:	e007      	b.n	8001246 <__sfputs_r+0x22>
 8001236:	463a      	mov	r2, r7
 8001238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800123c:	4630      	mov	r0, r6
 800123e:	f7ff ffd9 	bl	80011f4 <__sfputc_r>
 8001242:	1c43      	adds	r3, r0, #1
 8001244:	d1f3      	bne.n	800122e <__sfputs_r+0xa>
 8001246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001248 <_vfiprintf_r>:
 8001248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800124c:	b09d      	sub	sp, #116	; 0x74
 800124e:	460c      	mov	r4, r1
 8001250:	4617      	mov	r7, r2
 8001252:	9303      	str	r3, [sp, #12]
 8001254:	4606      	mov	r6, r0
 8001256:	b118      	cbz	r0, 8001260 <_vfiprintf_r+0x18>
 8001258:	6983      	ldr	r3, [r0, #24]
 800125a:	b90b      	cbnz	r3, 8001260 <_vfiprintf_r+0x18>
 800125c:	f7ff ff3e 	bl	80010dc <__sinit>
 8001260:	4b7c      	ldr	r3, [pc, #496]	; (8001454 <_vfiprintf_r+0x20c>)
 8001262:	429c      	cmp	r4, r3
 8001264:	d157      	bne.n	8001316 <_vfiprintf_r+0xce>
 8001266:	6874      	ldr	r4, [r6, #4]
 8001268:	89a3      	ldrh	r3, [r4, #12]
 800126a:	0718      	lsls	r0, r3, #28
 800126c:	d55d      	bpl.n	800132a <_vfiprintf_r+0xe2>
 800126e:	6923      	ldr	r3, [r4, #16]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d05a      	beq.n	800132a <_vfiprintf_r+0xe2>
 8001274:	2300      	movs	r3, #0
 8001276:	9309      	str	r3, [sp, #36]	; 0x24
 8001278:	2320      	movs	r3, #32
 800127a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800127e:	2330      	movs	r3, #48	; 0x30
 8001280:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001284:	f04f 0b01 	mov.w	fp, #1
 8001288:	46b8      	mov	r8, r7
 800128a:	4645      	mov	r5, r8
 800128c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d155      	bne.n	8001340 <_vfiprintf_r+0xf8>
 8001294:	ebb8 0a07 	subs.w	sl, r8, r7
 8001298:	d00b      	beq.n	80012b2 <_vfiprintf_r+0x6a>
 800129a:	4653      	mov	r3, sl
 800129c:	463a      	mov	r2, r7
 800129e:	4621      	mov	r1, r4
 80012a0:	4630      	mov	r0, r6
 80012a2:	f7ff ffbf 	bl	8001224 <__sfputs_r>
 80012a6:	3001      	adds	r0, #1
 80012a8:	f000 80c4 	beq.w	8001434 <_vfiprintf_r+0x1ec>
 80012ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012ae:	4453      	add	r3, sl
 80012b0:	9309      	str	r3, [sp, #36]	; 0x24
 80012b2:	f898 3000 	ldrb.w	r3, [r8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80bc 	beq.w	8001434 <_vfiprintf_r+0x1ec>
 80012bc:	2300      	movs	r3, #0
 80012be:	f04f 32ff 	mov.w	r2, #4294967295
 80012c2:	9304      	str	r3, [sp, #16]
 80012c4:	9307      	str	r3, [sp, #28]
 80012c6:	9205      	str	r2, [sp, #20]
 80012c8:	9306      	str	r3, [sp, #24]
 80012ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80012ce:	931a      	str	r3, [sp, #104]	; 0x68
 80012d0:	2205      	movs	r2, #5
 80012d2:	7829      	ldrb	r1, [r5, #0]
 80012d4:	4860      	ldr	r0, [pc, #384]	; (8001458 <_vfiprintf_r+0x210>)
 80012d6:	f7fe ff7b 	bl	80001d0 <memchr>
 80012da:	f105 0801 	add.w	r8, r5, #1
 80012de:	9b04      	ldr	r3, [sp, #16]
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d131      	bne.n	8001348 <_vfiprintf_r+0x100>
 80012e4:	06d9      	lsls	r1, r3, #27
 80012e6:	bf44      	itt	mi
 80012e8:	2220      	movmi	r2, #32
 80012ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80012ee:	071a      	lsls	r2, r3, #28
 80012f0:	bf44      	itt	mi
 80012f2:	222b      	movmi	r2, #43	; 0x2b
 80012f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80012f8:	782a      	ldrb	r2, [r5, #0]
 80012fa:	2a2a      	cmp	r2, #42	; 0x2a
 80012fc:	d02c      	beq.n	8001358 <_vfiprintf_r+0x110>
 80012fe:	9a07      	ldr	r2, [sp, #28]
 8001300:	2100      	movs	r1, #0
 8001302:	200a      	movs	r0, #10
 8001304:	46a8      	mov	r8, r5
 8001306:	3501      	adds	r5, #1
 8001308:	f898 3000 	ldrb.w	r3, [r8]
 800130c:	3b30      	subs	r3, #48	; 0x30
 800130e:	2b09      	cmp	r3, #9
 8001310:	d96d      	bls.n	80013ee <_vfiprintf_r+0x1a6>
 8001312:	b371      	cbz	r1, 8001372 <_vfiprintf_r+0x12a>
 8001314:	e026      	b.n	8001364 <_vfiprintf_r+0x11c>
 8001316:	4b51      	ldr	r3, [pc, #324]	; (800145c <_vfiprintf_r+0x214>)
 8001318:	429c      	cmp	r4, r3
 800131a:	d101      	bne.n	8001320 <_vfiprintf_r+0xd8>
 800131c:	68b4      	ldr	r4, [r6, #8]
 800131e:	e7a3      	b.n	8001268 <_vfiprintf_r+0x20>
 8001320:	4b4f      	ldr	r3, [pc, #316]	; (8001460 <_vfiprintf_r+0x218>)
 8001322:	429c      	cmp	r4, r3
 8001324:	bf08      	it	eq
 8001326:	68f4      	ldreq	r4, [r6, #12]
 8001328:	e79e      	b.n	8001268 <_vfiprintf_r+0x20>
 800132a:	4621      	mov	r1, r4
 800132c:	4630      	mov	r0, r6
 800132e:	f000 fadf 	bl	80018f0 <__swsetup_r>
 8001332:	2800      	cmp	r0, #0
 8001334:	d09e      	beq.n	8001274 <_vfiprintf_r+0x2c>
 8001336:	f04f 30ff 	mov.w	r0, #4294967295
 800133a:	b01d      	add	sp, #116	; 0x74
 800133c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001340:	2b25      	cmp	r3, #37	; 0x25
 8001342:	d0a7      	beq.n	8001294 <_vfiprintf_r+0x4c>
 8001344:	46a8      	mov	r8, r5
 8001346:	e7a0      	b.n	800128a <_vfiprintf_r+0x42>
 8001348:	4a43      	ldr	r2, [pc, #268]	; (8001458 <_vfiprintf_r+0x210>)
 800134a:	1a80      	subs	r0, r0, r2
 800134c:	fa0b f000 	lsl.w	r0, fp, r0
 8001350:	4318      	orrs	r0, r3
 8001352:	9004      	str	r0, [sp, #16]
 8001354:	4645      	mov	r5, r8
 8001356:	e7bb      	b.n	80012d0 <_vfiprintf_r+0x88>
 8001358:	9a03      	ldr	r2, [sp, #12]
 800135a:	1d11      	adds	r1, r2, #4
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	9103      	str	r1, [sp, #12]
 8001360:	2a00      	cmp	r2, #0
 8001362:	db01      	blt.n	8001368 <_vfiprintf_r+0x120>
 8001364:	9207      	str	r2, [sp, #28]
 8001366:	e004      	b.n	8001372 <_vfiprintf_r+0x12a>
 8001368:	4252      	negs	r2, r2
 800136a:	f043 0302 	orr.w	r3, r3, #2
 800136e:	9207      	str	r2, [sp, #28]
 8001370:	9304      	str	r3, [sp, #16]
 8001372:	f898 3000 	ldrb.w	r3, [r8]
 8001376:	2b2e      	cmp	r3, #46	; 0x2e
 8001378:	d110      	bne.n	800139c <_vfiprintf_r+0x154>
 800137a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800137e:	2b2a      	cmp	r3, #42	; 0x2a
 8001380:	f108 0101 	add.w	r1, r8, #1
 8001384:	d137      	bne.n	80013f6 <_vfiprintf_r+0x1ae>
 8001386:	9b03      	ldr	r3, [sp, #12]
 8001388:	1d1a      	adds	r2, r3, #4
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	9203      	str	r2, [sp, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	bfb8      	it	lt
 8001392:	f04f 33ff 	movlt.w	r3, #4294967295
 8001396:	f108 0802 	add.w	r8, r8, #2
 800139a:	9305      	str	r3, [sp, #20]
 800139c:	4d31      	ldr	r5, [pc, #196]	; (8001464 <_vfiprintf_r+0x21c>)
 800139e:	f898 1000 	ldrb.w	r1, [r8]
 80013a2:	2203      	movs	r2, #3
 80013a4:	4628      	mov	r0, r5
 80013a6:	f7fe ff13 	bl	80001d0 <memchr>
 80013aa:	b140      	cbz	r0, 80013be <_vfiprintf_r+0x176>
 80013ac:	2340      	movs	r3, #64	; 0x40
 80013ae:	1b40      	subs	r0, r0, r5
 80013b0:	fa03 f000 	lsl.w	r0, r3, r0
 80013b4:	9b04      	ldr	r3, [sp, #16]
 80013b6:	4303      	orrs	r3, r0
 80013b8:	9304      	str	r3, [sp, #16]
 80013ba:	f108 0801 	add.w	r8, r8, #1
 80013be:	f898 1000 	ldrb.w	r1, [r8]
 80013c2:	4829      	ldr	r0, [pc, #164]	; (8001468 <_vfiprintf_r+0x220>)
 80013c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013c8:	2206      	movs	r2, #6
 80013ca:	f108 0701 	add.w	r7, r8, #1
 80013ce:	f7fe feff 	bl	80001d0 <memchr>
 80013d2:	2800      	cmp	r0, #0
 80013d4:	d034      	beq.n	8001440 <_vfiprintf_r+0x1f8>
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <_vfiprintf_r+0x224>)
 80013d8:	bb03      	cbnz	r3, 800141c <_vfiprintf_r+0x1d4>
 80013da:	9b03      	ldr	r3, [sp, #12]
 80013dc:	3307      	adds	r3, #7
 80013de:	f023 0307 	bic.w	r3, r3, #7
 80013e2:	3308      	adds	r3, #8
 80013e4:	9303      	str	r3, [sp, #12]
 80013e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013e8:	444b      	add	r3, r9
 80013ea:	9309      	str	r3, [sp, #36]	; 0x24
 80013ec:	e74c      	b.n	8001288 <_vfiprintf_r+0x40>
 80013ee:	fb00 3202 	mla	r2, r0, r2, r3
 80013f2:	2101      	movs	r1, #1
 80013f4:	e786      	b.n	8001304 <_vfiprintf_r+0xbc>
 80013f6:	2300      	movs	r3, #0
 80013f8:	9305      	str	r3, [sp, #20]
 80013fa:	4618      	mov	r0, r3
 80013fc:	250a      	movs	r5, #10
 80013fe:	4688      	mov	r8, r1
 8001400:	3101      	adds	r1, #1
 8001402:	f898 2000 	ldrb.w	r2, [r8]
 8001406:	3a30      	subs	r2, #48	; 0x30
 8001408:	2a09      	cmp	r2, #9
 800140a:	d903      	bls.n	8001414 <_vfiprintf_r+0x1cc>
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0c5      	beq.n	800139c <_vfiprintf_r+0x154>
 8001410:	9005      	str	r0, [sp, #20]
 8001412:	e7c3      	b.n	800139c <_vfiprintf_r+0x154>
 8001414:	fb05 2000 	mla	r0, r5, r0, r2
 8001418:	2301      	movs	r3, #1
 800141a:	e7f0      	b.n	80013fe <_vfiprintf_r+0x1b6>
 800141c:	ab03      	add	r3, sp, #12
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	4622      	mov	r2, r4
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <_vfiprintf_r+0x228>)
 8001424:	a904      	add	r1, sp, #16
 8001426:	4630      	mov	r0, r6
 8001428:	f3af 8000 	nop.w
 800142c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001430:	4681      	mov	r9, r0
 8001432:	d1d8      	bne.n	80013e6 <_vfiprintf_r+0x19e>
 8001434:	89a3      	ldrh	r3, [r4, #12]
 8001436:	065b      	lsls	r3, r3, #25
 8001438:	f53f af7d 	bmi.w	8001336 <_vfiprintf_r+0xee>
 800143c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800143e:	e77c      	b.n	800133a <_vfiprintf_r+0xf2>
 8001440:	ab03      	add	r3, sp, #12
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	4622      	mov	r2, r4
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <_vfiprintf_r+0x228>)
 8001448:	a904      	add	r1, sp, #16
 800144a:	4630      	mov	r0, r6
 800144c:	f000 f888 	bl	8001560 <_printf_i>
 8001450:	e7ec      	b.n	800142c <_vfiprintf_r+0x1e4>
 8001452:	bf00      	nop
 8001454:	08001d64 	.word	0x08001d64
 8001458:	08001da8 	.word	0x08001da8
 800145c:	08001d84 	.word	0x08001d84
 8001460:	08001d44 	.word	0x08001d44
 8001464:	08001dae 	.word	0x08001dae
 8001468:	08001db2 	.word	0x08001db2
 800146c:	00000000 	.word	0x00000000
 8001470:	08001225 	.word	0x08001225

08001474 <_printf_common>:
 8001474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001478:	4691      	mov	r9, r2
 800147a:	461f      	mov	r7, r3
 800147c:	688a      	ldr	r2, [r1, #8]
 800147e:	690b      	ldr	r3, [r1, #16]
 8001480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001484:	4293      	cmp	r3, r2
 8001486:	bfb8      	it	lt
 8001488:	4613      	movlt	r3, r2
 800148a:	f8c9 3000 	str.w	r3, [r9]
 800148e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001492:	4606      	mov	r6, r0
 8001494:	460c      	mov	r4, r1
 8001496:	b112      	cbz	r2, 800149e <_printf_common+0x2a>
 8001498:	3301      	adds	r3, #1
 800149a:	f8c9 3000 	str.w	r3, [r9]
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	0699      	lsls	r1, r3, #26
 80014a2:	bf42      	ittt	mi
 80014a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80014a8:	3302      	addmi	r3, #2
 80014aa:	f8c9 3000 	strmi.w	r3, [r9]
 80014ae:	6825      	ldr	r5, [r4, #0]
 80014b0:	f015 0506 	ands.w	r5, r5, #6
 80014b4:	d107      	bne.n	80014c6 <_printf_common+0x52>
 80014b6:	f104 0a19 	add.w	sl, r4, #25
 80014ba:	68e3      	ldr	r3, [r4, #12]
 80014bc:	f8d9 2000 	ldr.w	r2, [r9]
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	429d      	cmp	r5, r3
 80014c4:	db29      	blt.n	800151a <_printf_common+0xa6>
 80014c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80014ca:	6822      	ldr	r2, [r4, #0]
 80014cc:	3300      	adds	r3, #0
 80014ce:	bf18      	it	ne
 80014d0:	2301      	movne	r3, #1
 80014d2:	0692      	lsls	r2, r2, #26
 80014d4:	d42e      	bmi.n	8001534 <_printf_common+0xc0>
 80014d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014da:	4639      	mov	r1, r7
 80014dc:	4630      	mov	r0, r6
 80014de:	47c0      	blx	r8
 80014e0:	3001      	adds	r0, #1
 80014e2:	d021      	beq.n	8001528 <_printf_common+0xb4>
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	68e5      	ldr	r5, [r4, #12]
 80014e8:	f8d9 2000 	ldr.w	r2, [r9]
 80014ec:	f003 0306 	and.w	r3, r3, #6
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	bf08      	it	eq
 80014f4:	1aad      	subeq	r5, r5, r2
 80014f6:	68a3      	ldr	r3, [r4, #8]
 80014f8:	6922      	ldr	r2, [r4, #16]
 80014fa:	bf0c      	ite	eq
 80014fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001500:	2500      	movne	r5, #0
 8001502:	4293      	cmp	r3, r2
 8001504:	bfc4      	itt	gt
 8001506:	1a9b      	subgt	r3, r3, r2
 8001508:	18ed      	addgt	r5, r5, r3
 800150a:	f04f 0900 	mov.w	r9, #0
 800150e:	341a      	adds	r4, #26
 8001510:	454d      	cmp	r5, r9
 8001512:	d11b      	bne.n	800154c <_printf_common+0xd8>
 8001514:	2000      	movs	r0, #0
 8001516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800151a:	2301      	movs	r3, #1
 800151c:	4652      	mov	r2, sl
 800151e:	4639      	mov	r1, r7
 8001520:	4630      	mov	r0, r6
 8001522:	47c0      	blx	r8
 8001524:	3001      	adds	r0, #1
 8001526:	d103      	bne.n	8001530 <_printf_common+0xbc>
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001530:	3501      	adds	r5, #1
 8001532:	e7c2      	b.n	80014ba <_printf_common+0x46>
 8001534:	18e1      	adds	r1, r4, r3
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	2030      	movs	r0, #48	; 0x30
 800153a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800153e:	4422      	add	r2, r4
 8001540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001548:	3302      	adds	r3, #2
 800154a:	e7c4      	b.n	80014d6 <_printf_common+0x62>
 800154c:	2301      	movs	r3, #1
 800154e:	4622      	mov	r2, r4
 8001550:	4639      	mov	r1, r7
 8001552:	4630      	mov	r0, r6
 8001554:	47c0      	blx	r8
 8001556:	3001      	adds	r0, #1
 8001558:	d0e6      	beq.n	8001528 <_printf_common+0xb4>
 800155a:	f109 0901 	add.w	r9, r9, #1
 800155e:	e7d7      	b.n	8001510 <_printf_common+0x9c>

08001560 <_printf_i>:
 8001560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001564:	4617      	mov	r7, r2
 8001566:	7e0a      	ldrb	r2, [r1, #24]
 8001568:	b085      	sub	sp, #20
 800156a:	2a6e      	cmp	r2, #110	; 0x6e
 800156c:	4698      	mov	r8, r3
 800156e:	4606      	mov	r6, r0
 8001570:	460c      	mov	r4, r1
 8001572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001574:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001578:	f000 80bc 	beq.w	80016f4 <_printf_i+0x194>
 800157c:	d81a      	bhi.n	80015b4 <_printf_i+0x54>
 800157e:	2a63      	cmp	r2, #99	; 0x63
 8001580:	d02e      	beq.n	80015e0 <_printf_i+0x80>
 8001582:	d80a      	bhi.n	800159a <_printf_i+0x3a>
 8001584:	2a00      	cmp	r2, #0
 8001586:	f000 80c8 	beq.w	800171a <_printf_i+0x1ba>
 800158a:	2a58      	cmp	r2, #88	; 0x58
 800158c:	f000 808a 	beq.w	80016a4 <_printf_i+0x144>
 8001590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001594:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001598:	e02a      	b.n	80015f0 <_printf_i+0x90>
 800159a:	2a64      	cmp	r2, #100	; 0x64
 800159c:	d001      	beq.n	80015a2 <_printf_i+0x42>
 800159e:	2a69      	cmp	r2, #105	; 0x69
 80015a0:	d1f6      	bne.n	8001590 <_printf_i+0x30>
 80015a2:	6821      	ldr	r1, [r4, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80015aa:	d023      	beq.n	80015f4 <_printf_i+0x94>
 80015ac:	1d11      	adds	r1, r2, #4
 80015ae:	6019      	str	r1, [r3, #0]
 80015b0:	6813      	ldr	r3, [r2, #0]
 80015b2:	e027      	b.n	8001604 <_printf_i+0xa4>
 80015b4:	2a73      	cmp	r2, #115	; 0x73
 80015b6:	f000 80b4 	beq.w	8001722 <_printf_i+0x1c2>
 80015ba:	d808      	bhi.n	80015ce <_printf_i+0x6e>
 80015bc:	2a6f      	cmp	r2, #111	; 0x6f
 80015be:	d02a      	beq.n	8001616 <_printf_i+0xb6>
 80015c0:	2a70      	cmp	r2, #112	; 0x70
 80015c2:	d1e5      	bne.n	8001590 <_printf_i+0x30>
 80015c4:	680a      	ldr	r2, [r1, #0]
 80015c6:	f042 0220 	orr.w	r2, r2, #32
 80015ca:	600a      	str	r2, [r1, #0]
 80015cc:	e003      	b.n	80015d6 <_printf_i+0x76>
 80015ce:	2a75      	cmp	r2, #117	; 0x75
 80015d0:	d021      	beq.n	8001616 <_printf_i+0xb6>
 80015d2:	2a78      	cmp	r2, #120	; 0x78
 80015d4:	d1dc      	bne.n	8001590 <_printf_i+0x30>
 80015d6:	2278      	movs	r2, #120	; 0x78
 80015d8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80015dc:	496e      	ldr	r1, [pc, #440]	; (8001798 <_printf_i+0x238>)
 80015de:	e064      	b.n	80016aa <_printf_i+0x14a>
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80015e6:	1d11      	adds	r1, r2, #4
 80015e8:	6019      	str	r1, [r3, #0]
 80015ea:	6813      	ldr	r3, [r2, #0]
 80015ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0a3      	b.n	800173c <_printf_i+0x1dc>
 80015f4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80015f8:	f102 0104 	add.w	r1, r2, #4
 80015fc:	6019      	str	r1, [r3, #0]
 80015fe:	d0d7      	beq.n	80015b0 <_printf_i+0x50>
 8001600:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001604:	2b00      	cmp	r3, #0
 8001606:	da03      	bge.n	8001610 <_printf_i+0xb0>
 8001608:	222d      	movs	r2, #45	; 0x2d
 800160a:	425b      	negs	r3, r3
 800160c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001610:	4962      	ldr	r1, [pc, #392]	; (800179c <_printf_i+0x23c>)
 8001612:	220a      	movs	r2, #10
 8001614:	e017      	b.n	8001646 <_printf_i+0xe6>
 8001616:	6820      	ldr	r0, [r4, #0]
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800161e:	d003      	beq.n	8001628 <_printf_i+0xc8>
 8001620:	1d08      	adds	r0, r1, #4
 8001622:	6018      	str	r0, [r3, #0]
 8001624:	680b      	ldr	r3, [r1, #0]
 8001626:	e006      	b.n	8001636 <_printf_i+0xd6>
 8001628:	f010 0f40 	tst.w	r0, #64	; 0x40
 800162c:	f101 0004 	add.w	r0, r1, #4
 8001630:	6018      	str	r0, [r3, #0]
 8001632:	d0f7      	beq.n	8001624 <_printf_i+0xc4>
 8001634:	880b      	ldrh	r3, [r1, #0]
 8001636:	4959      	ldr	r1, [pc, #356]	; (800179c <_printf_i+0x23c>)
 8001638:	2a6f      	cmp	r2, #111	; 0x6f
 800163a:	bf14      	ite	ne
 800163c:	220a      	movne	r2, #10
 800163e:	2208      	moveq	r2, #8
 8001640:	2000      	movs	r0, #0
 8001642:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001646:	6865      	ldr	r5, [r4, #4]
 8001648:	60a5      	str	r5, [r4, #8]
 800164a:	2d00      	cmp	r5, #0
 800164c:	f2c0 809c 	blt.w	8001788 <_printf_i+0x228>
 8001650:	6820      	ldr	r0, [r4, #0]
 8001652:	f020 0004 	bic.w	r0, r0, #4
 8001656:	6020      	str	r0, [r4, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d13f      	bne.n	80016dc <_printf_i+0x17c>
 800165c:	2d00      	cmp	r5, #0
 800165e:	f040 8095 	bne.w	800178c <_printf_i+0x22c>
 8001662:	4675      	mov	r5, lr
 8001664:	2a08      	cmp	r2, #8
 8001666:	d10b      	bne.n	8001680 <_printf_i+0x120>
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	07da      	lsls	r2, r3, #31
 800166c:	d508      	bpl.n	8001680 <_printf_i+0x120>
 800166e:	6923      	ldr	r3, [r4, #16]
 8001670:	6862      	ldr	r2, [r4, #4]
 8001672:	429a      	cmp	r2, r3
 8001674:	bfde      	ittt	le
 8001676:	2330      	movle	r3, #48	; 0x30
 8001678:	f805 3c01 	strble.w	r3, [r5, #-1]
 800167c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001680:	ebae 0305 	sub.w	r3, lr, r5
 8001684:	6123      	str	r3, [r4, #16]
 8001686:	f8cd 8000 	str.w	r8, [sp]
 800168a:	463b      	mov	r3, r7
 800168c:	aa03      	add	r2, sp, #12
 800168e:	4621      	mov	r1, r4
 8001690:	4630      	mov	r0, r6
 8001692:	f7ff feef 	bl	8001474 <_printf_common>
 8001696:	3001      	adds	r0, #1
 8001698:	d155      	bne.n	8001746 <_printf_i+0x1e6>
 800169a:	f04f 30ff 	mov.w	r0, #4294967295
 800169e:	b005      	add	sp, #20
 80016a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016a4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80016a8:	493c      	ldr	r1, [pc, #240]	; (800179c <_printf_i+0x23c>)
 80016aa:	6822      	ldr	r2, [r4, #0]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016b2:	f100 0504 	add.w	r5, r0, #4
 80016b6:	601d      	str	r5, [r3, #0]
 80016b8:	d001      	beq.n	80016be <_printf_i+0x15e>
 80016ba:	6803      	ldr	r3, [r0, #0]
 80016bc:	e002      	b.n	80016c4 <_printf_i+0x164>
 80016be:	0655      	lsls	r5, r2, #25
 80016c0:	d5fb      	bpl.n	80016ba <_printf_i+0x15a>
 80016c2:	8803      	ldrh	r3, [r0, #0]
 80016c4:	07d0      	lsls	r0, r2, #31
 80016c6:	bf44      	itt	mi
 80016c8:	f042 0220 	orrmi.w	r2, r2, #32
 80016cc:	6022      	strmi	r2, [r4, #0]
 80016ce:	b91b      	cbnz	r3, 80016d8 <_printf_i+0x178>
 80016d0:	6822      	ldr	r2, [r4, #0]
 80016d2:	f022 0220 	bic.w	r2, r2, #32
 80016d6:	6022      	str	r2, [r4, #0]
 80016d8:	2210      	movs	r2, #16
 80016da:	e7b1      	b.n	8001640 <_printf_i+0xe0>
 80016dc:	4675      	mov	r5, lr
 80016de:	fbb3 f0f2 	udiv	r0, r3, r2
 80016e2:	fb02 3310 	mls	r3, r2, r0, r3
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80016ec:	4603      	mov	r3, r0
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d1f5      	bne.n	80016de <_printf_i+0x17e>
 80016f2:	e7b7      	b.n	8001664 <_printf_i+0x104>
 80016f4:	6808      	ldr	r0, [r1, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	6949      	ldr	r1, [r1, #20]
 80016fa:	f010 0f80 	tst.w	r0, #128	; 0x80
 80016fe:	d004      	beq.n	800170a <_printf_i+0x1aa>
 8001700:	1d10      	adds	r0, r2, #4
 8001702:	6018      	str	r0, [r3, #0]
 8001704:	6813      	ldr	r3, [r2, #0]
 8001706:	6019      	str	r1, [r3, #0]
 8001708:	e007      	b.n	800171a <_printf_i+0x1ba>
 800170a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800170e:	f102 0004 	add.w	r0, r2, #4
 8001712:	6018      	str	r0, [r3, #0]
 8001714:	6813      	ldr	r3, [r2, #0]
 8001716:	d0f6      	beq.n	8001706 <_printf_i+0x1a6>
 8001718:	8019      	strh	r1, [r3, #0]
 800171a:	2300      	movs	r3, #0
 800171c:	6123      	str	r3, [r4, #16]
 800171e:	4675      	mov	r5, lr
 8001720:	e7b1      	b.n	8001686 <_printf_i+0x126>
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	1d11      	adds	r1, r2, #4
 8001726:	6019      	str	r1, [r3, #0]
 8001728:	6815      	ldr	r5, [r2, #0]
 800172a:	6862      	ldr	r2, [r4, #4]
 800172c:	2100      	movs	r1, #0
 800172e:	4628      	mov	r0, r5
 8001730:	f7fe fd4e 	bl	80001d0 <memchr>
 8001734:	b108      	cbz	r0, 800173a <_printf_i+0x1da>
 8001736:	1b40      	subs	r0, r0, r5
 8001738:	6060      	str	r0, [r4, #4]
 800173a:	6863      	ldr	r3, [r4, #4]
 800173c:	6123      	str	r3, [r4, #16]
 800173e:	2300      	movs	r3, #0
 8001740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001744:	e79f      	b.n	8001686 <_printf_i+0x126>
 8001746:	6923      	ldr	r3, [r4, #16]
 8001748:	462a      	mov	r2, r5
 800174a:	4639      	mov	r1, r7
 800174c:	4630      	mov	r0, r6
 800174e:	47c0      	blx	r8
 8001750:	3001      	adds	r0, #1
 8001752:	d0a2      	beq.n	800169a <_printf_i+0x13a>
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	079b      	lsls	r3, r3, #30
 8001758:	d507      	bpl.n	800176a <_printf_i+0x20a>
 800175a:	2500      	movs	r5, #0
 800175c:	f104 0919 	add.w	r9, r4, #25
 8001760:	68e3      	ldr	r3, [r4, #12]
 8001762:	9a03      	ldr	r2, [sp, #12]
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	429d      	cmp	r5, r3
 8001768:	db05      	blt.n	8001776 <_printf_i+0x216>
 800176a:	68e0      	ldr	r0, [r4, #12]
 800176c:	9b03      	ldr	r3, [sp, #12]
 800176e:	4298      	cmp	r0, r3
 8001770:	bfb8      	it	lt
 8001772:	4618      	movlt	r0, r3
 8001774:	e793      	b.n	800169e <_printf_i+0x13e>
 8001776:	2301      	movs	r3, #1
 8001778:	464a      	mov	r2, r9
 800177a:	4639      	mov	r1, r7
 800177c:	4630      	mov	r0, r6
 800177e:	47c0      	blx	r8
 8001780:	3001      	adds	r0, #1
 8001782:	d08a      	beq.n	800169a <_printf_i+0x13a>
 8001784:	3501      	adds	r5, #1
 8001786:	e7eb      	b.n	8001760 <_printf_i+0x200>
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1a7      	bne.n	80016dc <_printf_i+0x17c>
 800178c:	780b      	ldrb	r3, [r1, #0]
 800178e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001792:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001796:	e765      	b.n	8001664 <_printf_i+0x104>
 8001798:	08001dca 	.word	0x08001dca
 800179c:	08001db9 	.word	0x08001db9

080017a0 <__sread>:
 80017a0:	b510      	push	{r4, lr}
 80017a2:	460c      	mov	r4, r1
 80017a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017a8:	f000 fa48 	bl	8001c3c <_read_r>
 80017ac:	2800      	cmp	r0, #0
 80017ae:	bfab      	itete	ge
 80017b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80017b2:	89a3      	ldrhlt	r3, [r4, #12]
 80017b4:	181b      	addge	r3, r3, r0
 80017b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80017ba:	bfac      	ite	ge
 80017bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80017be:	81a3      	strhlt	r3, [r4, #12]
 80017c0:	bd10      	pop	{r4, pc}

080017c2 <__swrite>:
 80017c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017c6:	461f      	mov	r7, r3
 80017c8:	898b      	ldrh	r3, [r1, #12]
 80017ca:	05db      	lsls	r3, r3, #23
 80017cc:	4605      	mov	r5, r0
 80017ce:	460c      	mov	r4, r1
 80017d0:	4616      	mov	r6, r2
 80017d2:	d505      	bpl.n	80017e0 <__swrite+0x1e>
 80017d4:	2302      	movs	r3, #2
 80017d6:	2200      	movs	r2, #0
 80017d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017dc:	f000 f9b8 	bl	8001b50 <_lseek_r>
 80017e0:	89a3      	ldrh	r3, [r4, #12]
 80017e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017ea:	81a3      	strh	r3, [r4, #12]
 80017ec:	4632      	mov	r2, r6
 80017ee:	463b      	mov	r3, r7
 80017f0:	4628      	mov	r0, r5
 80017f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017f6:	f000 b869 	b.w	80018cc <_write_r>

080017fa <__sseek>:
 80017fa:	b510      	push	{r4, lr}
 80017fc:	460c      	mov	r4, r1
 80017fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001802:	f000 f9a5 	bl	8001b50 <_lseek_r>
 8001806:	1c43      	adds	r3, r0, #1
 8001808:	89a3      	ldrh	r3, [r4, #12]
 800180a:	bf15      	itete	ne
 800180c:	6560      	strne	r0, [r4, #84]	; 0x54
 800180e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001816:	81a3      	strheq	r3, [r4, #12]
 8001818:	bf18      	it	ne
 800181a:	81a3      	strhne	r3, [r4, #12]
 800181c:	bd10      	pop	{r4, pc}

0800181e <__sclose>:
 800181e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001822:	f000 b8d3 	b.w	80019cc <_close_r>
	...

08001828 <__swbuf_r>:
 8001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182a:	460e      	mov	r6, r1
 800182c:	4614      	mov	r4, r2
 800182e:	4605      	mov	r5, r0
 8001830:	b118      	cbz	r0, 800183a <__swbuf_r+0x12>
 8001832:	6983      	ldr	r3, [r0, #24]
 8001834:	b90b      	cbnz	r3, 800183a <__swbuf_r+0x12>
 8001836:	f7ff fc51 	bl	80010dc <__sinit>
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <__swbuf_r+0x98>)
 800183c:	429c      	cmp	r4, r3
 800183e:	d12a      	bne.n	8001896 <__swbuf_r+0x6e>
 8001840:	686c      	ldr	r4, [r5, #4]
 8001842:	69a3      	ldr	r3, [r4, #24]
 8001844:	60a3      	str	r3, [r4, #8]
 8001846:	89a3      	ldrh	r3, [r4, #12]
 8001848:	071a      	lsls	r2, r3, #28
 800184a:	d52e      	bpl.n	80018aa <__swbuf_r+0x82>
 800184c:	6923      	ldr	r3, [r4, #16]
 800184e:	b363      	cbz	r3, 80018aa <__swbuf_r+0x82>
 8001850:	6923      	ldr	r3, [r4, #16]
 8001852:	6820      	ldr	r0, [r4, #0]
 8001854:	1ac0      	subs	r0, r0, r3
 8001856:	6963      	ldr	r3, [r4, #20]
 8001858:	b2f6      	uxtb	r6, r6
 800185a:	4298      	cmp	r0, r3
 800185c:	4637      	mov	r7, r6
 800185e:	db04      	blt.n	800186a <__swbuf_r+0x42>
 8001860:	4621      	mov	r1, r4
 8001862:	4628      	mov	r0, r5
 8001864:	f000 f94a 	bl	8001afc <_fflush_r>
 8001868:	bb28      	cbnz	r0, 80018b6 <__swbuf_r+0x8e>
 800186a:	68a3      	ldr	r3, [r4, #8]
 800186c:	3b01      	subs	r3, #1
 800186e:	60a3      	str	r3, [r4, #8]
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	6022      	str	r2, [r4, #0]
 8001876:	701e      	strb	r6, [r3, #0]
 8001878:	6963      	ldr	r3, [r4, #20]
 800187a:	3001      	adds	r0, #1
 800187c:	4298      	cmp	r0, r3
 800187e:	d004      	beq.n	800188a <__swbuf_r+0x62>
 8001880:	89a3      	ldrh	r3, [r4, #12]
 8001882:	07db      	lsls	r3, r3, #31
 8001884:	d519      	bpl.n	80018ba <__swbuf_r+0x92>
 8001886:	2e0a      	cmp	r6, #10
 8001888:	d117      	bne.n	80018ba <__swbuf_r+0x92>
 800188a:	4621      	mov	r1, r4
 800188c:	4628      	mov	r0, r5
 800188e:	f000 f935 	bl	8001afc <_fflush_r>
 8001892:	b190      	cbz	r0, 80018ba <__swbuf_r+0x92>
 8001894:	e00f      	b.n	80018b6 <__swbuf_r+0x8e>
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <__swbuf_r+0x9c>)
 8001898:	429c      	cmp	r4, r3
 800189a:	d101      	bne.n	80018a0 <__swbuf_r+0x78>
 800189c:	68ac      	ldr	r4, [r5, #8]
 800189e:	e7d0      	b.n	8001842 <__swbuf_r+0x1a>
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <__swbuf_r+0xa0>)
 80018a2:	429c      	cmp	r4, r3
 80018a4:	bf08      	it	eq
 80018a6:	68ec      	ldreq	r4, [r5, #12]
 80018a8:	e7cb      	b.n	8001842 <__swbuf_r+0x1a>
 80018aa:	4621      	mov	r1, r4
 80018ac:	4628      	mov	r0, r5
 80018ae:	f000 f81f 	bl	80018f0 <__swsetup_r>
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d0cc      	beq.n	8001850 <__swbuf_r+0x28>
 80018b6:	f04f 37ff 	mov.w	r7, #4294967295
 80018ba:	4638      	mov	r0, r7
 80018bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018be:	bf00      	nop
 80018c0:	08001d64 	.word	0x08001d64
 80018c4:	08001d84 	.word	0x08001d84
 80018c8:	08001d44 	.word	0x08001d44

080018cc <_write_r>:
 80018cc:	b538      	push	{r3, r4, r5, lr}
 80018ce:	4c07      	ldr	r4, [pc, #28]	; (80018ec <_write_r+0x20>)
 80018d0:	4605      	mov	r5, r0
 80018d2:	4608      	mov	r0, r1
 80018d4:	4611      	mov	r1, r2
 80018d6:	2200      	movs	r2, #0
 80018d8:	6022      	str	r2, [r4, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	f7ff f9ee 	bl	8000cbc <_write>
 80018e0:	1c43      	adds	r3, r0, #1
 80018e2:	d102      	bne.n	80018ea <_write_r+0x1e>
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	b103      	cbz	r3, 80018ea <_write_r+0x1e>
 80018e8:	602b      	str	r3, [r5, #0]
 80018ea:	bd38      	pop	{r3, r4, r5, pc}
 80018ec:	20000334 	.word	0x20000334

080018f0 <__swsetup_r>:
 80018f0:	4b32      	ldr	r3, [pc, #200]	; (80019bc <__swsetup_r+0xcc>)
 80018f2:	b570      	push	{r4, r5, r6, lr}
 80018f4:	681d      	ldr	r5, [r3, #0]
 80018f6:	4606      	mov	r6, r0
 80018f8:	460c      	mov	r4, r1
 80018fa:	b125      	cbz	r5, 8001906 <__swsetup_r+0x16>
 80018fc:	69ab      	ldr	r3, [r5, #24]
 80018fe:	b913      	cbnz	r3, 8001906 <__swsetup_r+0x16>
 8001900:	4628      	mov	r0, r5
 8001902:	f7ff fbeb 	bl	80010dc <__sinit>
 8001906:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <__swsetup_r+0xd0>)
 8001908:	429c      	cmp	r4, r3
 800190a:	d10f      	bne.n	800192c <__swsetup_r+0x3c>
 800190c:	686c      	ldr	r4, [r5, #4]
 800190e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001912:	b29a      	uxth	r2, r3
 8001914:	0715      	lsls	r5, r2, #28
 8001916:	d42c      	bmi.n	8001972 <__swsetup_r+0x82>
 8001918:	06d0      	lsls	r0, r2, #27
 800191a:	d411      	bmi.n	8001940 <__swsetup_r+0x50>
 800191c:	2209      	movs	r2, #9
 800191e:	6032      	str	r2, [r6, #0]
 8001920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001924:	81a3      	strh	r3, [r4, #12]
 8001926:	f04f 30ff 	mov.w	r0, #4294967295
 800192a:	bd70      	pop	{r4, r5, r6, pc}
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <__swsetup_r+0xd4>)
 800192e:	429c      	cmp	r4, r3
 8001930:	d101      	bne.n	8001936 <__swsetup_r+0x46>
 8001932:	68ac      	ldr	r4, [r5, #8]
 8001934:	e7eb      	b.n	800190e <__swsetup_r+0x1e>
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <__swsetup_r+0xd8>)
 8001938:	429c      	cmp	r4, r3
 800193a:	bf08      	it	eq
 800193c:	68ec      	ldreq	r4, [r5, #12]
 800193e:	e7e6      	b.n	800190e <__swsetup_r+0x1e>
 8001940:	0751      	lsls	r1, r2, #29
 8001942:	d512      	bpl.n	800196a <__swsetup_r+0x7a>
 8001944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001946:	b141      	cbz	r1, 800195a <__swsetup_r+0x6a>
 8001948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800194c:	4299      	cmp	r1, r3
 800194e:	d002      	beq.n	8001956 <__swsetup_r+0x66>
 8001950:	4630      	mov	r0, r6
 8001952:	f7ff faaf 	bl	8000eb4 <_free_r>
 8001956:	2300      	movs	r3, #0
 8001958:	6363      	str	r3, [r4, #52]	; 0x34
 800195a:	89a3      	ldrh	r3, [r4, #12]
 800195c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001960:	81a3      	strh	r3, [r4, #12]
 8001962:	2300      	movs	r3, #0
 8001964:	6063      	str	r3, [r4, #4]
 8001966:	6923      	ldr	r3, [r4, #16]
 8001968:	6023      	str	r3, [r4, #0]
 800196a:	89a3      	ldrh	r3, [r4, #12]
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	81a3      	strh	r3, [r4, #12]
 8001972:	6923      	ldr	r3, [r4, #16]
 8001974:	b94b      	cbnz	r3, 800198a <__swsetup_r+0x9a>
 8001976:	89a3      	ldrh	r3, [r4, #12]
 8001978:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800197c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001980:	d003      	beq.n	800198a <__swsetup_r+0x9a>
 8001982:	4621      	mov	r1, r4
 8001984:	4630      	mov	r0, r6
 8001986:	f000 f919 	bl	8001bbc <__smakebuf_r>
 800198a:	89a2      	ldrh	r2, [r4, #12]
 800198c:	f012 0301 	ands.w	r3, r2, #1
 8001990:	d00c      	beq.n	80019ac <__swsetup_r+0xbc>
 8001992:	2300      	movs	r3, #0
 8001994:	60a3      	str	r3, [r4, #8]
 8001996:	6963      	ldr	r3, [r4, #20]
 8001998:	425b      	negs	r3, r3
 800199a:	61a3      	str	r3, [r4, #24]
 800199c:	6923      	ldr	r3, [r4, #16]
 800199e:	b953      	cbnz	r3, 80019b6 <__swsetup_r+0xc6>
 80019a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80019a8:	d1ba      	bne.n	8001920 <__swsetup_r+0x30>
 80019aa:	bd70      	pop	{r4, r5, r6, pc}
 80019ac:	0792      	lsls	r2, r2, #30
 80019ae:	bf58      	it	pl
 80019b0:	6963      	ldrpl	r3, [r4, #20]
 80019b2:	60a3      	str	r3, [r4, #8]
 80019b4:	e7f2      	b.n	800199c <__swsetup_r+0xac>
 80019b6:	2000      	movs	r0, #0
 80019b8:	e7f7      	b.n	80019aa <__swsetup_r+0xba>
 80019ba:	bf00      	nop
 80019bc:	20000018 	.word	0x20000018
 80019c0:	08001d64 	.word	0x08001d64
 80019c4:	08001d84 	.word	0x08001d84
 80019c8:	08001d44 	.word	0x08001d44

080019cc <_close_r>:
 80019cc:	b538      	push	{r3, r4, r5, lr}
 80019ce:	4c06      	ldr	r4, [pc, #24]	; (80019e8 <_close_r+0x1c>)
 80019d0:	2300      	movs	r3, #0
 80019d2:	4605      	mov	r5, r0
 80019d4:	4608      	mov	r0, r1
 80019d6:	6023      	str	r3, [r4, #0]
 80019d8:	f000 f964 	bl	8001ca4 <_close>
 80019dc:	1c43      	adds	r3, r0, #1
 80019de:	d102      	bne.n	80019e6 <_close_r+0x1a>
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	b103      	cbz	r3, 80019e6 <_close_r+0x1a>
 80019e4:	602b      	str	r3, [r5, #0]
 80019e6:	bd38      	pop	{r3, r4, r5, pc}
 80019e8:	20000334 	.word	0x20000334

080019ec <__sflush_r>:
 80019ec:	898a      	ldrh	r2, [r1, #12]
 80019ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f2:	4605      	mov	r5, r0
 80019f4:	0710      	lsls	r0, r2, #28
 80019f6:	460c      	mov	r4, r1
 80019f8:	d45a      	bmi.n	8001ab0 <__sflush_r+0xc4>
 80019fa:	684b      	ldr	r3, [r1, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	dc05      	bgt.n	8001a0c <__sflush_r+0x20>
 8001a00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dc02      	bgt.n	8001a0c <__sflush_r+0x20>
 8001a06:	2000      	movs	r0, #0
 8001a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a0e:	2e00      	cmp	r6, #0
 8001a10:	d0f9      	beq.n	8001a06 <__sflush_r+0x1a>
 8001a12:	2300      	movs	r3, #0
 8001a14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a18:	682f      	ldr	r7, [r5, #0]
 8001a1a:	602b      	str	r3, [r5, #0]
 8001a1c:	d033      	beq.n	8001a86 <__sflush_r+0x9a>
 8001a1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a20:	89a3      	ldrh	r3, [r4, #12]
 8001a22:	075a      	lsls	r2, r3, #29
 8001a24:	d505      	bpl.n	8001a32 <__sflush_r+0x46>
 8001a26:	6863      	ldr	r3, [r4, #4]
 8001a28:	1ac0      	subs	r0, r0, r3
 8001a2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a2c:	b10b      	cbz	r3, 8001a32 <__sflush_r+0x46>
 8001a2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a30:	1ac0      	subs	r0, r0, r3
 8001a32:	2300      	movs	r3, #0
 8001a34:	4602      	mov	r2, r0
 8001a36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a38:	6a21      	ldr	r1, [r4, #32]
 8001a3a:	4628      	mov	r0, r5
 8001a3c:	47b0      	blx	r6
 8001a3e:	1c43      	adds	r3, r0, #1
 8001a40:	89a3      	ldrh	r3, [r4, #12]
 8001a42:	d106      	bne.n	8001a52 <__sflush_r+0x66>
 8001a44:	6829      	ldr	r1, [r5, #0]
 8001a46:	291d      	cmp	r1, #29
 8001a48:	d84b      	bhi.n	8001ae2 <__sflush_r+0xf6>
 8001a4a:	4a2b      	ldr	r2, [pc, #172]	; (8001af8 <__sflush_r+0x10c>)
 8001a4c:	40ca      	lsrs	r2, r1
 8001a4e:	07d6      	lsls	r6, r2, #31
 8001a50:	d547      	bpl.n	8001ae2 <__sflush_r+0xf6>
 8001a52:	2200      	movs	r2, #0
 8001a54:	6062      	str	r2, [r4, #4]
 8001a56:	04d9      	lsls	r1, r3, #19
 8001a58:	6922      	ldr	r2, [r4, #16]
 8001a5a:	6022      	str	r2, [r4, #0]
 8001a5c:	d504      	bpl.n	8001a68 <__sflush_r+0x7c>
 8001a5e:	1c42      	adds	r2, r0, #1
 8001a60:	d101      	bne.n	8001a66 <__sflush_r+0x7a>
 8001a62:	682b      	ldr	r3, [r5, #0]
 8001a64:	b903      	cbnz	r3, 8001a68 <__sflush_r+0x7c>
 8001a66:	6560      	str	r0, [r4, #84]	; 0x54
 8001a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a6a:	602f      	str	r7, [r5, #0]
 8001a6c:	2900      	cmp	r1, #0
 8001a6e:	d0ca      	beq.n	8001a06 <__sflush_r+0x1a>
 8001a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a74:	4299      	cmp	r1, r3
 8001a76:	d002      	beq.n	8001a7e <__sflush_r+0x92>
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f7ff fa1b 	bl	8000eb4 <_free_r>
 8001a7e:	2000      	movs	r0, #0
 8001a80:	6360      	str	r0, [r4, #52]	; 0x34
 8001a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a86:	6a21      	ldr	r1, [r4, #32]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	47b0      	blx	r6
 8001a8e:	1c41      	adds	r1, r0, #1
 8001a90:	d1c6      	bne.n	8001a20 <__sflush_r+0x34>
 8001a92:	682b      	ldr	r3, [r5, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0c3      	beq.n	8001a20 <__sflush_r+0x34>
 8001a98:	2b1d      	cmp	r3, #29
 8001a9a:	d001      	beq.n	8001aa0 <__sflush_r+0xb4>
 8001a9c:	2b16      	cmp	r3, #22
 8001a9e:	d101      	bne.n	8001aa4 <__sflush_r+0xb8>
 8001aa0:	602f      	str	r7, [r5, #0]
 8001aa2:	e7b0      	b.n	8001a06 <__sflush_r+0x1a>
 8001aa4:	89a3      	ldrh	r3, [r4, #12]
 8001aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aaa:	81a3      	strh	r3, [r4, #12]
 8001aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ab0:	690f      	ldr	r7, [r1, #16]
 8001ab2:	2f00      	cmp	r7, #0
 8001ab4:	d0a7      	beq.n	8001a06 <__sflush_r+0x1a>
 8001ab6:	0793      	lsls	r3, r2, #30
 8001ab8:	680e      	ldr	r6, [r1, #0]
 8001aba:	bf08      	it	eq
 8001abc:	694b      	ldreq	r3, [r1, #20]
 8001abe:	600f      	str	r7, [r1, #0]
 8001ac0:	bf18      	it	ne
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	eba6 0807 	sub.w	r8, r6, r7
 8001ac8:	608b      	str	r3, [r1, #8]
 8001aca:	f1b8 0f00 	cmp.w	r8, #0
 8001ace:	dd9a      	ble.n	8001a06 <__sflush_r+0x1a>
 8001ad0:	4643      	mov	r3, r8
 8001ad2:	463a      	mov	r2, r7
 8001ad4:	6a21      	ldr	r1, [r4, #32]
 8001ad6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ad8:	4628      	mov	r0, r5
 8001ada:	47b0      	blx	r6
 8001adc:	2800      	cmp	r0, #0
 8001ade:	dc07      	bgt.n	8001af0 <__sflush_r+0x104>
 8001ae0:	89a3      	ldrh	r3, [r4, #12]
 8001ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae6:	81a3      	strh	r3, [r4, #12]
 8001ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001af0:	4407      	add	r7, r0
 8001af2:	eba8 0800 	sub.w	r8, r8, r0
 8001af6:	e7e8      	b.n	8001aca <__sflush_r+0xde>
 8001af8:	20400001 	.word	0x20400001

08001afc <_fflush_r>:
 8001afc:	b538      	push	{r3, r4, r5, lr}
 8001afe:	690b      	ldr	r3, [r1, #16]
 8001b00:	4605      	mov	r5, r0
 8001b02:	460c      	mov	r4, r1
 8001b04:	b1db      	cbz	r3, 8001b3e <_fflush_r+0x42>
 8001b06:	b118      	cbz	r0, 8001b10 <_fflush_r+0x14>
 8001b08:	6983      	ldr	r3, [r0, #24]
 8001b0a:	b90b      	cbnz	r3, 8001b10 <_fflush_r+0x14>
 8001b0c:	f7ff fae6 	bl	80010dc <__sinit>
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <_fflush_r+0x48>)
 8001b12:	429c      	cmp	r4, r3
 8001b14:	d109      	bne.n	8001b2a <_fflush_r+0x2e>
 8001b16:	686c      	ldr	r4, [r5, #4]
 8001b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b1c:	b17b      	cbz	r3, 8001b3e <_fflush_r+0x42>
 8001b1e:	4621      	mov	r1, r4
 8001b20:	4628      	mov	r0, r5
 8001b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b26:	f7ff bf61 	b.w	80019ec <__sflush_r>
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <_fflush_r+0x4c>)
 8001b2c:	429c      	cmp	r4, r3
 8001b2e:	d101      	bne.n	8001b34 <_fflush_r+0x38>
 8001b30:	68ac      	ldr	r4, [r5, #8]
 8001b32:	e7f1      	b.n	8001b18 <_fflush_r+0x1c>
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <_fflush_r+0x50>)
 8001b36:	429c      	cmp	r4, r3
 8001b38:	bf08      	it	eq
 8001b3a:	68ec      	ldreq	r4, [r5, #12]
 8001b3c:	e7ec      	b.n	8001b18 <_fflush_r+0x1c>
 8001b3e:	2000      	movs	r0, #0
 8001b40:	bd38      	pop	{r3, r4, r5, pc}
 8001b42:	bf00      	nop
 8001b44:	08001d64 	.word	0x08001d64
 8001b48:	08001d84 	.word	0x08001d84
 8001b4c:	08001d44 	.word	0x08001d44

08001b50 <_lseek_r>:
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	4c07      	ldr	r4, [pc, #28]	; (8001b70 <_lseek_r+0x20>)
 8001b54:	4605      	mov	r5, r0
 8001b56:	4608      	mov	r0, r1
 8001b58:	4611      	mov	r1, r2
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	6022      	str	r2, [r4, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f000 f8b8 	bl	8001cd4 <_lseek>
 8001b64:	1c43      	adds	r3, r0, #1
 8001b66:	d102      	bne.n	8001b6e <_lseek_r+0x1e>
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	b103      	cbz	r3, 8001b6e <_lseek_r+0x1e>
 8001b6c:	602b      	str	r3, [r5, #0]
 8001b6e:	bd38      	pop	{r3, r4, r5, pc}
 8001b70:	20000334 	.word	0x20000334

08001b74 <__swhatbuf_r>:
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	460e      	mov	r6, r1
 8001b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b7c:	2900      	cmp	r1, #0
 8001b7e:	b090      	sub	sp, #64	; 0x40
 8001b80:	4614      	mov	r4, r2
 8001b82:	461d      	mov	r5, r3
 8001b84:	da07      	bge.n	8001b96 <__swhatbuf_r+0x22>
 8001b86:	2300      	movs	r3, #0
 8001b88:	602b      	str	r3, [r5, #0]
 8001b8a:	89b3      	ldrh	r3, [r6, #12]
 8001b8c:	061a      	lsls	r2, r3, #24
 8001b8e:	d410      	bmi.n	8001bb2 <__swhatbuf_r+0x3e>
 8001b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b94:	e00e      	b.n	8001bb4 <__swhatbuf_r+0x40>
 8001b96:	aa01      	add	r2, sp, #4
 8001b98:	f000 f862 	bl	8001c60 <_fstat_r>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	dbf2      	blt.n	8001b86 <__swhatbuf_r+0x12>
 8001ba0:	9a02      	ldr	r2, [sp, #8]
 8001ba2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ba6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001baa:	425a      	negs	r2, r3
 8001bac:	415a      	adcs	r2, r3
 8001bae:	602a      	str	r2, [r5, #0]
 8001bb0:	e7ee      	b.n	8001b90 <__swhatbuf_r+0x1c>
 8001bb2:	2340      	movs	r3, #64	; 0x40
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	6023      	str	r3, [r4, #0]
 8001bb8:	b010      	add	sp, #64	; 0x40
 8001bba:	bd70      	pop	{r4, r5, r6, pc}

08001bbc <__smakebuf_r>:
 8001bbc:	898b      	ldrh	r3, [r1, #12]
 8001bbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001bc0:	079d      	lsls	r5, r3, #30
 8001bc2:	4606      	mov	r6, r0
 8001bc4:	460c      	mov	r4, r1
 8001bc6:	d507      	bpl.n	8001bd8 <__smakebuf_r+0x1c>
 8001bc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001bcc:	6023      	str	r3, [r4, #0]
 8001bce:	6123      	str	r3, [r4, #16]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	6163      	str	r3, [r4, #20]
 8001bd4:	b002      	add	sp, #8
 8001bd6:	bd70      	pop	{r4, r5, r6, pc}
 8001bd8:	ab01      	add	r3, sp, #4
 8001bda:	466a      	mov	r2, sp
 8001bdc:	f7ff ffca 	bl	8001b74 <__swhatbuf_r>
 8001be0:	9900      	ldr	r1, [sp, #0]
 8001be2:	4605      	mov	r5, r0
 8001be4:	4630      	mov	r0, r6
 8001be6:	f7ff f9b3 	bl	8000f50 <_malloc_r>
 8001bea:	b948      	cbnz	r0, 8001c00 <__smakebuf_r+0x44>
 8001bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bf0:	059a      	lsls	r2, r3, #22
 8001bf2:	d4ef      	bmi.n	8001bd4 <__smakebuf_r+0x18>
 8001bf4:	f023 0303 	bic.w	r3, r3, #3
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	81a3      	strh	r3, [r4, #12]
 8001bfe:	e7e3      	b.n	8001bc8 <__smakebuf_r+0xc>
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <__smakebuf_r+0x7c>)
 8001c02:	62b3      	str	r3, [r6, #40]	; 0x28
 8001c04:	89a3      	ldrh	r3, [r4, #12]
 8001c06:	6020      	str	r0, [r4, #0]
 8001c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0c:	81a3      	strh	r3, [r4, #12]
 8001c0e:	9b00      	ldr	r3, [sp, #0]
 8001c10:	6163      	str	r3, [r4, #20]
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	6120      	str	r0, [r4, #16]
 8001c16:	b15b      	cbz	r3, 8001c30 <__smakebuf_r+0x74>
 8001c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c1c:	4630      	mov	r0, r6
 8001c1e:	f000 f831 	bl	8001c84 <_isatty_r>
 8001c22:	b128      	cbz	r0, 8001c30 <__smakebuf_r+0x74>
 8001c24:	89a3      	ldrh	r3, [r4, #12]
 8001c26:	f023 0303 	bic.w	r3, r3, #3
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	81a3      	strh	r3, [r4, #12]
 8001c30:	89a3      	ldrh	r3, [r4, #12]
 8001c32:	431d      	orrs	r5, r3
 8001c34:	81a5      	strh	r5, [r4, #12]
 8001c36:	e7cd      	b.n	8001bd4 <__smakebuf_r+0x18>
 8001c38:	0800105d 	.word	0x0800105d

08001c3c <_read_r>:
 8001c3c:	b538      	push	{r3, r4, r5, lr}
 8001c3e:	4c07      	ldr	r4, [pc, #28]	; (8001c5c <_read_r+0x20>)
 8001c40:	4605      	mov	r5, r0
 8001c42:	4608      	mov	r0, r1
 8001c44:	4611      	mov	r1, r2
 8001c46:	2200      	movs	r2, #0
 8001c48:	6022      	str	r2, [r4, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f000 f84a 	bl	8001ce4 <_read>
 8001c50:	1c43      	adds	r3, r0, #1
 8001c52:	d102      	bne.n	8001c5a <_read_r+0x1e>
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	b103      	cbz	r3, 8001c5a <_read_r+0x1e>
 8001c58:	602b      	str	r3, [r5, #0]
 8001c5a:	bd38      	pop	{r3, r4, r5, pc}
 8001c5c:	20000334 	.word	0x20000334

08001c60 <_fstat_r>:
 8001c60:	b538      	push	{r3, r4, r5, lr}
 8001c62:	4c07      	ldr	r4, [pc, #28]	; (8001c80 <_fstat_r+0x20>)
 8001c64:	2300      	movs	r3, #0
 8001c66:	4605      	mov	r5, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	6023      	str	r3, [r4, #0]
 8001c6e:	f000 f821 	bl	8001cb4 <_fstat>
 8001c72:	1c43      	adds	r3, r0, #1
 8001c74:	d102      	bne.n	8001c7c <_fstat_r+0x1c>
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	b103      	cbz	r3, 8001c7c <_fstat_r+0x1c>
 8001c7a:	602b      	str	r3, [r5, #0]
 8001c7c:	bd38      	pop	{r3, r4, r5, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000334 	.word	0x20000334

08001c84 <_isatty_r>:
 8001c84:	b538      	push	{r3, r4, r5, lr}
 8001c86:	4c06      	ldr	r4, [pc, #24]	; (8001ca0 <_isatty_r+0x1c>)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	4605      	mov	r5, r0
 8001c8c:	4608      	mov	r0, r1
 8001c8e:	6023      	str	r3, [r4, #0]
 8001c90:	f000 f818 	bl	8001cc4 <_isatty>
 8001c94:	1c43      	adds	r3, r0, #1
 8001c96:	d102      	bne.n	8001c9e <_isatty_r+0x1a>
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	b103      	cbz	r3, 8001c9e <_isatty_r+0x1a>
 8001c9c:	602b      	str	r3, [r5, #0]
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ca0:	20000334 	.word	0x20000334

08001ca4 <_close>:
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <_close+0xc>)
 8001ca6:	2258      	movs	r2, #88	; 0x58
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	f04f 30ff 	mov.w	r0, #4294967295
 8001cae:	4770      	bx	lr
 8001cb0:	20000334 	.word	0x20000334

08001cb4 <_fstat>:
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <_fstat+0xc>)
 8001cb6:	2258      	movs	r2, #88	; 0x58
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbe:	4770      	bx	lr
 8001cc0:	20000334 	.word	0x20000334

08001cc4 <_isatty>:
 8001cc4:	4b02      	ldr	r3, [pc, #8]	; (8001cd0 <_isatty+0xc>)
 8001cc6:	2258      	movs	r2, #88	; 0x58
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	2000      	movs	r0, #0
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000334 	.word	0x20000334

08001cd4 <_lseek>:
 8001cd4:	4b02      	ldr	r3, [pc, #8]	; (8001ce0 <_lseek+0xc>)
 8001cd6:	2258      	movs	r2, #88	; 0x58
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f04f 30ff 	mov.w	r0, #4294967295
 8001cde:	4770      	bx	lr
 8001ce0:	20000334 	.word	0x20000334

08001ce4 <_read>:
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <_read+0xc>)
 8001ce6:	2258      	movs	r2, #88	; 0x58
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f04f 30ff 	mov.w	r0, #4294967295
 8001cee:	4770      	bx	lr
 8001cf0:	20000334 	.word	0x20000334

08001cf4 <_sbrk>:
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <_sbrk+0x14>)
 8001cf6:	6819      	ldr	r1, [r3, #0]
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	b909      	cbnz	r1, 8001d00 <_sbrk+0xc>
 8001cfc:	4903      	ldr	r1, [pc, #12]	; (8001d0c <_sbrk+0x18>)
 8001cfe:	6019      	str	r1, [r3, #0]
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	4402      	add	r2, r0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	4770      	bx	lr
 8001d08:	2000032c 	.word	0x2000032c
 8001d0c:	20000338 	.word	0x20000338

08001d10 <_init>:
 8001d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d12:	bf00      	nop
 8001d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d16:	bc08      	pop	{r3}
 8001d18:	469e      	mov	lr, r3
 8001d1a:	4770      	bx	lr

08001d1c <_fini>:
 8001d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1e:	bf00      	nop
 8001d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d22:	bc08      	pop	{r3}
 8001d24:	469e      	mov	lr, r3
 8001d26:	4770      	bx	lr


bme280_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e9c  08000e9c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000e9c  08000e9c  00010e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ea0  08000ea0  00010ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  08000ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  7 .bss          000000d8  2000007c  2000007c  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20000154  20000154  0002007c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002ebf  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000008fc  00000000  00000000  00022f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000180  00000000  00000000  00023868  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  000239e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000ea7  00000000  00000000  00023b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000fd3  00000000  00000000  000249cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000259a2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000005f8  00000000  00000000  00025a20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e84 	.word	0x08000e84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08000e84 	.word	0x08000e84

080001c8 <I2C_init>:

#include "stm32f3xx.h"
#include "../inc/stm32f303_i2c.h"

void I2C_init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->CFGR3 |= RCC_CFGR3_I2C1SW;
 80001cc:	4a15      	ldr	r2, [pc, #84]	; (8000224 <I2C_init+0x5c>)
 80001ce:	4b15      	ldr	r3, [pc, #84]	; (8000224 <I2C_init+0x5c>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80001d8:	4a12      	ldr	r2, [pc, #72]	; (8000224 <I2C_init+0x5c>)
 80001da:	4b12      	ldr	r3, [pc, #72]	; (8000224 <I2C_init+0x5c>)
 80001dc:	69db      	ldr	r3, [r3, #28]
 80001de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e2:	61d3      	str	r3, [r2, #28]

	GPIOB->MODER |= GPIO_MODER_MODER6_1 | GPIO_MODER_MODER7_1;
 80001e4:	4a10      	ldr	r2, [pc, #64]	; (8000228 <I2C_init+0x60>)
 80001e6:	4b10      	ldr	r3, [pc, #64]	; (8000228 <I2C_init+0x60>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT_6 | GPIO_OTYPER_OT_7;
 80001f0:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <I2C_init+0x60>)
 80001f2:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <I2C_init+0x60>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80001fa:	6053      	str	r3, [r2, #4]
	GPIOB->AFR[0] |= (4<<24) | (4<<28);
 80001fc:	4a0a      	ldr	r2, [pc, #40]	; (8000228 <I2C_init+0x60>)
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <I2C_init+0x60>)
 8000200:	6a1b      	ldr	r3, [r3, #32]
 8000202:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8000206:	6213      	str	r3, [r2, #32]

	I2C1->TIMINGR = (12<<28) |
 8000208:	4b08      	ldr	r3, [pc, #32]	; (800022c <I2C_init+0x64>)
 800020a:	4a09      	ldr	r2, [pc, #36]	; (8000230 <I2C_init+0x68>)
 800020c:	611a      	str	r2, [r3, #16]
					(28<<0)  |
					(23<<8)  |
					(3<<20) 	|
					(3<<16) 	;
	I2C1->CR1 |= I2C_CR1_NOSTRETCH;
 800020e:	4a07      	ldr	r2, [pc, #28]	; (800022c <I2C_init+0x64>)
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <I2C_init+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000218:	6013      	str	r3, [r2, #0]
}
 800021a:	bf00      	nop
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	40021000 	.word	0x40021000
 8000228:	48000400 	.word	0x48000400
 800022c:	40005400 	.word	0x40005400
 8000230:	c033171c 	.word	0xc033171c

08000234 <I2C_readByte>:
	while(I2C1->CR2 & I2C_CR2_STOP);
	I2C1->CR1 &= ~I2C_CR1_PE;
}

uint8_t I2C_readByte(uint8_t slave)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]
	I2C1->CR1 |= I2C_CR1_PE;
 8000242:	4a27      	ldr	r2, [pc, #156]	; (80002e0 <I2C_readByte+0xac>)
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <I2C_readByte+0xac>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f043 0301 	orr.w	r3, r3, #1
 800024c:	6013      	str	r3, [r2, #0]
	I2C1->CR2 = (I2C1->CR2 & 0xFFFFFF00) | (slave<<1);
 800024e:	4924      	ldr	r1, [pc, #144]	; (80002e0 <I2C_readByte+0xac>)
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <I2C_readByte+0xac>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	0052      	lsls	r2, r2, #1
 800025c:	4313      	orrs	r3, r2
 800025e:	604b      	str	r3, [r1, #4]
	I2C1->CR2 = (I2C1->CR2 & 0xFF00FFFF) | (1<<16);
 8000260:	4a1f      	ldr	r2, [pc, #124]	; (80002e0 <I2C_readByte+0xac>)
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <I2C_readByte+0xac>)
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800026a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800026e:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= I2C_CR2_RD_WRN;
 8000270:	4a1b      	ldr	r2, [pc, #108]	; (80002e0 <I2C_readByte+0xac>)
 8000272:	4b1b      	ldr	r3, [pc, #108]	; (80002e0 <I2C_readByte+0xac>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800027a:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= I2C_CR2_START;
 800027c:	4a18      	ldr	r2, [pc, #96]	; (80002e0 <I2C_readByte+0xac>)
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <I2C_readByte+0xac>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000286:	6053      	str	r3, [r2, #4]
	while(I2C1->CR2 & I2C_CR2_START);
 8000288:	bf00      	nop
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <I2C_readByte+0xac>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000292:	2b00      	cmp	r3, #0
 8000294:	d1f9      	bne.n	800028a <I2C_readByte+0x56>
	while(!(I2C1->ISR & I2C_ISR_RXNE));
 8000296:	bf00      	nop
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <I2C_readByte+0xac>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0304 	and.w	r3, r3, #4
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0f9      	beq.n	8000298 <I2C_readByte+0x64>
	data = I2C1->RXDR;
 80002a4:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <I2C_readByte+0xac>)
 80002a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a8:	73fb      	strb	r3, [r7, #15]
	I2C1->CR2 |= I2C_CR2_STOP;
 80002aa:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <I2C_readByte+0xac>)
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <I2C_readByte+0xac>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002b4:	6053      	str	r3, [r2, #4]
	while(I2C1->CR2 & I2C_CR2_STOP);
 80002b6:	bf00      	nop
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <I2C_readByte+0xac>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1f9      	bne.n	80002b8 <I2C_readByte+0x84>
	I2C1->CR1 &= ~I2C_CR1_PE;
 80002c4:	4a06      	ldr	r2, [pc, #24]	; (80002e0 <I2C_readByte+0xac>)
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <I2C_readByte+0xac>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f023 0301 	bic.w	r3, r3, #1
 80002ce:	6013      	str	r3, [r2, #0]
	return data;
 80002d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	3714      	adds	r7, #20
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40005400 	.word	0x40005400

080002e4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80002ee:	4909      	ldr	r1, [pc, #36]	; (8000314 <NVIC_EnableIRQ+0x30>)
 80002f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f4:	095b      	lsrs	r3, r3, #5
 80002f6:	79fa      	ldrb	r2, [r7, #7]
 80002f8:	f002 021f 	and.w	r2, r2, #31
 80002fc:	2001      	movs	r0, #1
 80002fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000e100 	.word	0xe000e100

08000318 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8000322:	4909      	ldr	r1, [pc, #36]	; (8000348 <NVIC_ClearPendingIRQ+0x30>)
 8000324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000328:	095b      	lsrs	r3, r3, #5
 800032a:	79fa      	ldrb	r2, [r7, #7]
 800032c:	f002 021f 	and.w	r2, r2, #31
 8000330:	2001      	movs	r0, #1
 8000332:	fa00 f202 	lsl.w	r2, r0, r2
 8000336:	3360      	adds	r3, #96	; 0x60
 8000338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	e000e100 	.word	0xe000e100

0800034c <PERIPH_USART_Init>:
PERIPH_USART_Instance_t * usart1ObjectPtr = 0;
PERIPH_USART_Instance_t * usart2ObjectPtr = 0;
PERIPH_USART_Instance_t * usart3ObjectPtr = 0;

void PERIPH_USART_Init(USART_TypeDef * usartNo, PERIPH_USART_Instance_t * object, uint32_t baudrate)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
	SystemCoreClockUpdate();
 8000358:	f000 fb7c 	bl	8000a54 <SystemCoreClockUpdate>

	if(usartNo == USART1)
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	4a41      	ldr	r2, [pc, #260]	; (8000464 <PERIPH_USART_Init+0x118>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d10c      	bne.n	800037e <PERIPH_USART_Init+0x32>
	{
		usart1ObjectPtr = object;
 8000364:	4a40      	ldr	r2, [pc, #256]	; (8000468 <PERIPH_USART_Init+0x11c>)
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	6013      	str	r3, [r2, #0]
		object->instance = usartNo;
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	601a      	str	r2, [r3, #0]
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000370:	4a3e      	ldr	r2, [pc, #248]	; (800046c <PERIPH_USART_Init+0x120>)
 8000372:	4b3e      	ldr	r3, [pc, #248]	; (800046c <PERIPH_USART_Init+0x120>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	e020      	b.n	80003c0 <PERIPH_USART_Init+0x74>
	}
	else if(usartNo == USART2)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	4a3b      	ldr	r2, [pc, #236]	; (8000470 <PERIPH_USART_Init+0x124>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d10c      	bne.n	80003a0 <PERIPH_USART_Init+0x54>
	{
		usart2ObjectPtr = object;
 8000386:	4a3b      	ldr	r2, [pc, #236]	; (8000474 <PERIPH_USART_Init+0x128>)
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	6013      	str	r3, [r2, #0]
		object->instance = usartNo;
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	68fa      	ldr	r2, [r7, #12]
 8000390:	601a      	str	r2, [r3, #0]
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000392:	4a36      	ldr	r2, [pc, #216]	; (800046c <PERIPH_USART_Init+0x120>)
 8000394:	4b35      	ldr	r3, [pc, #212]	; (800046c <PERIPH_USART_Init+0x120>)
 8000396:	69db      	ldr	r3, [r3, #28]
 8000398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800039c:	61d3      	str	r3, [r2, #28]
 800039e:	e00f      	b.n	80003c0 <PERIPH_USART_Init+0x74>
}
	else if(usartNo == USART3)
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	4a35      	ldr	r2, [pc, #212]	; (8000478 <PERIPH_USART_Init+0x12c>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d159      	bne.n	800045c <PERIPH_USART_Init+0x110>
	{
		usart3ObjectPtr = object;
 80003a8:	4a34      	ldr	r2, [pc, #208]	; (800047c <PERIPH_USART_Init+0x130>)
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	6013      	str	r3, [r2, #0]
		object->instance = usartNo;
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	601a      	str	r2, [r3, #0]
		RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 80003b4:	4a2d      	ldr	r2, [pc, #180]	; (800046c <PERIPH_USART_Init+0x120>)
 80003b6:	4b2d      	ldr	r3, [pc, #180]	; (800046c <PERIPH_USART_Init+0x120>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003be:	61d3      	str	r3, [r2, #28]
	else
	{
		return;
	}

	uint32_t USARTDIV = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
	USARTDIV = (SystemCoreClock * 2) / baudrate;
 80003c4:	4b2e      	ldr	r3, [pc, #184]	; (8000480 <PERIPH_USART_Init+0x134>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	005a      	lsls	r2, r3, #1
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d0:	617b      	str	r3, [r7, #20]
	object->instance->CR1 |= (USART_CR1_OVER8 | USART_CR1_RE | USART_CR1_TE | USART_CR1_RXNEIE);
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003e0:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 80003e4:	6013      	str	r3, [r2, #0]
	object->instance->BRR = ( USARTDIV & 0x0000FFF0);
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	6979      	ldr	r1, [r7, #20]
 80003ec:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80003f0:	400b      	ands	r3, r1
 80003f2:	60d3      	str	r3, [r2, #12]
	object->instance->BRR |= ((USARTDIV & 0x0000000F)>>1);
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	68ba      	ldr	r2, [r7, #8]
 80003fa:	6812      	ldr	r2, [r2, #0]
 80003fc:	68d1      	ldr	r1, [r2, #12]
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	0852      	lsrs	r2, r2, #1
 8000402:	f002 0207 	and.w	r2, r2, #7
 8000406:	430a      	orrs	r2, r1
 8000408:	60da      	str	r2, [r3, #12]
	object->instance->CR1 |= USART_CR1_UE;
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	68ba      	ldr	r2, [r7, #8]
 8000410:	6812      	ldr	r2, [r2, #0]
 8000412:	6812      	ldr	r2, [r2, #0]
 8000414:	f042 0201 	orr.w	r2, r2, #1
 8000418:	601a      	str	r2, [r3, #0]

	if(usartNo == USART1)
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	4a11      	ldr	r2, [pc, #68]	; (8000464 <PERIPH_USART_Init+0x118>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <PERIPH_USART_Init+0xe4>
	{
		NVIC_ClearPendingIRQ(USART1_IRQn);
 8000422:	2025      	movs	r0, #37	; 0x25
 8000424:	f7ff ff78 	bl	8000318 <NVIC_ClearPendingIRQ>
		NVIC_EnableIRQ(USART1_IRQn);
 8000428:	2025      	movs	r0, #37	; 0x25
 800042a:	f7ff ff5b 	bl	80002e4 <NVIC_EnableIRQ>
 800042e:	e016      	b.n	800045e <PERIPH_USART_Init+0x112>
	}
	else if(usartNo == USART2)
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <PERIPH_USART_Init+0x124>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <PERIPH_USART_Init+0xfa>
	{
		NVIC_ClearPendingIRQ(USART2_IRQn);
 8000438:	2026      	movs	r0, #38	; 0x26
 800043a:	f7ff ff6d 	bl	8000318 <NVIC_ClearPendingIRQ>
		NVIC_EnableIRQ(USART2_IRQn);
 800043e:	2026      	movs	r0, #38	; 0x26
 8000440:	f7ff ff50 	bl	80002e4 <NVIC_EnableIRQ>
 8000444:	e00b      	b.n	800045e <PERIPH_USART_Init+0x112>
	}
	else if(usartNo == USART3)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <PERIPH_USART_Init+0x12c>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d107      	bne.n	800045e <PERIPH_USART_Init+0x112>
	{
		NVIC_ClearPendingIRQ(USART3_IRQn);
 800044e:	2027      	movs	r0, #39	; 0x27
 8000450:	f7ff ff62 	bl	8000318 <NVIC_ClearPendingIRQ>
		NVIC_EnableIRQ(USART3_IRQn);
 8000454:	2027      	movs	r0, #39	; 0x27
 8000456:	f7ff ff45 	bl	80002e4 <NVIC_EnableIRQ>
 800045a:	e000      	b.n	800045e <PERIPH_USART_Init+0x112>
		return;
 800045c:	bf00      	nop
	}

}
 800045e:	3718      	adds	r7, #24
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40013800 	.word	0x40013800
 8000468:	20000098 	.word	0x20000098
 800046c:	40021000 	.word	0x40021000
 8000470:	40004400 	.word	0x40004400
 8000474:	2000009c 	.word	0x2000009c
 8000478:	40004800 	.word	0x40004800
 800047c:	200000a0 	.word	0x200000a0
 8000480:	20000004 	.word	0x20000004

08000484 <PERIPH_USART_GetChar>:

char PERIPH_USART_GetChar(PERIPH_USART_Instance_t * object)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	char data = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	73fb      	strb	r3, [r7, #15]

	if(object->usartCircullarBuffertRxHead != object->usartCircullarBuffertRxTail)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800049c:	429a      	cmp	r2, r3
 800049e:	d010      	beq.n	80004c2 <PERIPH_USART_GetChar+0x3e>
	{
		object->usartCircullarBuffertRxTail = (object->usartCircullarBuffertRxTail + 1) & PERIPH_USART_CIRCULLAR_BUFFER_RX_MASK;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004a6:	3301      	adds	r3, #1
 80004a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		data = object->usartCircullarBuffertRx[object->usartCircullarBuffertRxTail];
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	4413      	add	r3, r2
 80004bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80004c0:	73fb      	strb	r3, [r7, #15]
	}

	return data;
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <PERIPH_USART_GetString>:

char * PERIPH_USART_GetString(PERIPH_USART_Instance_t * object, char * inOutBuffer)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
	if(object->usartnoOfReceivedLines)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d019      	beq.n	8000518 <PERIPH_USART_GetString+0x48>
	{
		char data = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	72fb      	strb	r3, [r7, #11]
		char * tempBufPtr = inOutBuffer;
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	60fb      	str	r3, [r7, #12]
		while((data = PERIPH_USART_GetChar(object)))
 80004ec:	e004      	b.n	80004f8 <PERIPH_USART_GetString+0x28>
		{
			*tempBufPtr++ = data;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	60fa      	str	r2, [r7, #12]
 80004f4:	7afa      	ldrb	r2, [r7, #11]
 80004f6:	701a      	strb	r2, [r3, #0]
		while((data = PERIPH_USART_GetChar(object)))
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff ffc3 	bl	8000484 <PERIPH_USART_GetChar>
 80004fe:	4603      	mov	r3, r0
 8000500:	72fb      	strb	r3, [r7, #11]
 8000502:	7afb      	ldrb	r3, [r7, #11]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d1f2      	bne.n	80004ee <PERIPH_USART_GetString+0x1e>
		}
		object->usartnoOfReceivedLines--;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000516:	e002      	b.n	800051e <PERIPH_USART_GetString+0x4e>
	}
	else
	{
		*inOutBuffer = 0;
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
	}

	return inOutBuffer;
 800051e:	683b      	ldr	r3, [r7, #0]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <PERIPH_USART_RegisterRxCallback>:

void PERIPH_USART_RegisterRxCallback(PERIPH_USART_Instance_t * object , void (*rxCallbackPtr)(void))
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
	if(rxCallbackPtr)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d003      	beq.n	8000540 <PERIPH_USART_RegisterRxCallback+0x18>
	{
		object->newLineReceivedCallbackPtr = rxCallbackPtr;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	683a      	ldr	r2, [r7, #0]
 800053c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <PERIPH_USART_RXService>:

void PERIPH_USART_RXService(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	if(usart1ObjectPtr && (usart1ObjectPtr->usartnoOfReceivedLines != 0) && (usart1ObjectPtr->newLineReceivedCallbackPtr != 0))
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <PERIPH_USART_RXService+0x88>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d010      	beq.n	800057a <PERIPH_USART_RXService+0x2e>
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <PERIPH_USART_RXService+0x88>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00a      	beq.n	800057a <PERIPH_USART_RXService+0x2e>
 8000564:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <PERIPH_USART_RXService+0x88>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800056c:	2b00      	cmp	r3, #0
 800056e:	d004      	beq.n	800057a <PERIPH_USART_RXService+0x2e>
	{
		usart1ObjectPtr->newLineReceivedCallbackPtr();
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <PERIPH_USART_RXService+0x88>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000578:	4798      	blx	r3
	}
	if(usart2ObjectPtr && (usart2ObjectPtr->usartnoOfReceivedLines != 0) && (usart2ObjectPtr->newLineReceivedCallbackPtr != 0))
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <PERIPH_USART_RXService+0x8c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d010      	beq.n	80005a4 <PERIPH_USART_RXService+0x58>
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <PERIPH_USART_RXService+0x8c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00a      	beq.n	80005a4 <PERIPH_USART_RXService+0x58>
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <PERIPH_USART_RXService+0x8c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000596:	2b00      	cmp	r3, #0
 8000598:	d004      	beq.n	80005a4 <PERIPH_USART_RXService+0x58>
	{
		usart2ObjectPtr->newLineReceivedCallbackPtr();
 800059a:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <PERIPH_USART_RXService+0x8c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80005a2:	4798      	blx	r3
	}
	if(usart3ObjectPtr && (usart3ObjectPtr->usartnoOfReceivedLines != 0) && (usart3ObjectPtr->newLineReceivedCallbackPtr != 0))
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <PERIPH_USART_RXService+0x90>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d010      	beq.n	80005ce <PERIPH_USART_RXService+0x82>
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <PERIPH_USART_RXService+0x90>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00a      	beq.n	80005ce <PERIPH_USART_RXService+0x82>
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <PERIPH_USART_RXService+0x90>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d004      	beq.n	80005ce <PERIPH_USART_RXService+0x82>
	{
		usart3ObjectPtr->newLineReceivedCallbackPtr();
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <PERIPH_USART_RXService+0x90>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80005cc:	4798      	blx	r3
	}
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000098 	.word	0x20000098
 80005d8:	2000009c 	.word	0x2000009c
 80005dc:	200000a0 	.word	0x200000a0

080005e0 <PERIPH_USART_putc>:

void PERIPH_USART_putc(PERIPH_USART_Instance_t * object, char data)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	uint32_t tempHead = (object->usartCircullarBuffertTxHead + 1) & PERIPH_USART_CIRCULLAR_BUFFER_TX_MASK;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80005f2:	3301      	adds	r3, #1
 80005f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80005f8:	60fb      	str	r3, [r7, #12]
	if(tempHead == object->usartCircullarBuffertTxTail) return;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	429a      	cmp	r2, r3
 8000604:	d012      	beq.n	800062c <PERIPH_USART_putc+0x4c>
	else
	{
		object->usartCircullarBuffertTx[tempHead] = data;
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	3304      	adds	r3, #4
 800060e:	78fa      	ldrb	r2, [r7, #3]
 8000610:	701a      	strb	r2, [r3, #0]
		object->usartCircullarBuffertTxHead = tempHead;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		object->instance->CR1 |= USART_CR1_TXEIE;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	6812      	ldr	r2, [r2, #0]
 8000622:	6812      	ldr	r2, [r2, #0]
 8000624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	e000      	b.n	800062e <PERIPH_USART_putc+0x4e>
	if(tempHead == object->usartCircullarBuffertTxTail) return;
 800062c:	bf00      	nop
	}
}
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <PERIPH_USART_puts>:

void PERIPH_USART_puts(PERIPH_USART_Instance_t * object, char * dataBuffer)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
	char data = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	73fb      	strb	r3, [r7, #15]
	while((data = *dataBuffer++))
 8000646:	e004      	b.n	8000652 <PERIPH_USART_puts+0x1a>
	{
		PERIPH_USART_putc(object,data);
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	4619      	mov	r1, r3
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ffc7 	bl	80005e0 <PERIPH_USART_putc>
	while((data = *dataBuffer++))
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	603a      	str	r2, [r7, #0]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1f2      	bne.n	8000648 <PERIPH_USART_puts+0x10>
	}
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
	if(usart1ObjectPtr)
 8000672:	4b51      	ldr	r3, [pc, #324]	; (80007b8 <USART1_IRQHandler+0x14c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	f000 8098 	beq.w	80007ac <USART1_IRQHandler+0x140>
	{
		if(usart1ObjectPtr->instance->ISR & USART_ISR_RXNE)
 800067c:	4b4e      	ldr	r3, [pc, #312]	; (80007b8 <USART1_IRQHandler+0x14c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	69db      	ldr	r3, [r3, #28]
 8000684:	f003 0320 	and.w	r3, r3, #32
 8000688:	2b00      	cmp	r3, #0
 800068a:	d032      	beq.n	80006f2 <USART1_IRQHandler+0x86>
		{
			char receivedChar = usart1ObjectPtr->instance->RDR;
 800068c:	4b4a      	ldr	r3, [pc, #296]	; (80007b8 <USART1_IRQHandler+0x14c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000694:	b29b      	uxth	r3, r3
 8000696:	71fb      	strb	r3, [r7, #7]
			uint32_t tempHead = (usart1ObjectPtr->usartCircullarBuffertRxHead + 1) & PERIPH_USART_CIRCULLAR_BUFFER_RX_MASK;
 8000698:	4b47      	ldr	r3, [pc, #284]	; (80007b8 <USART1_IRQHandler+0x14c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006a0:	3301      	adds	r3, #1
 80006a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006a6:	603b      	str	r3, [r7, #0]
			if(tempHead == usart1ObjectPtr->usartCircullarBuffertRxTail )
 80006a8:	4b43      	ldr	r3, [pc, #268]	; (80007b8 <USART1_IRQHandler+0x14c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d079      	beq.n	80007aa <USART1_IRQHandler+0x13e>
			{
				return;
			}
			else
			{
				switch(receivedChar)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b0a      	cmp	r3, #10
 80006ba:	d001      	beq.n	80006c0 <USART1_IRQHandler+0x54>
 80006bc:	2b0d      	cmp	r3, #13
 80006be:	d108      	bne.n	80006d2 <USART1_IRQHandler+0x66>
				{
					case('\r'):
					case('\n'):
					{
						receivedChar = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	71fb      	strb	r3, [r7, #7]
						usart1ObjectPtr->usartnoOfReceivedLines++;
 80006c4:	4b3c      	ldr	r3, [pc, #240]	; (80007b8 <USART1_IRQHandler+0x14c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80006cc:	3201      	adds	r2, #1
 80006ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
					}
					default:
						usart1ObjectPtr->usartCircullarBuffertRxHead = tempHead;
 80006d2:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <USART1_IRQHandler+0x14c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						usart1ObjectPtr->usartCircullarBuffertRx[usart1ObjectPtr->usartCircullarBuffertRxHead] = receivedChar;
 80006dc:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <USART1_IRQHandler+0x14c>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <USART1_IRQHandler+0x14c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006e8:	4413      	add	r3, r2
 80006ea:	79fa      	ldrb	r2, [r7, #7]
 80006ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
					break;
 80006f0:	bf00      	nop
				}
			}

		}
		if(usart1ObjectPtr->instance->ISR & USART_ISR_TXE)
 80006f2:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <USART1_IRQHandler+0x14c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d036      	beq.n	8000770 <USART1_IRQHandler+0x104>
		{
			if( usart1ObjectPtr->usartCircullarBuffertTxTail != usart1ObjectPtr->usartCircullarBuffertTxHead )
 8000702:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <USART1_IRQHandler+0x14c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <USART1_IRQHandler+0x14c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000712:	429a      	cmp	r2, r3
 8000714:	d018      	beq.n	8000748 <USART1_IRQHandler+0xdc>
			{
				usart1ObjectPtr->usartCircullarBuffertTxTail = (usart1ObjectPtr->usartCircullarBuffertTxTail + 1) & PERIPH_USART_CIRCULLAR_BUFFER_TX_MASK;
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <USART1_IRQHandler+0x14c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a27      	ldr	r2, [pc, #156]	; (80007b8 <USART1_IRQHandler+0x14c>)
 800071c:	6812      	ldr	r2, [r2, #0]
 800071e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000722:	3201      	adds	r2, #1
 8000724:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				usart1ObjectPtr->instance->TDR  = usart1ObjectPtr->usartCircullarBuffertTx[usart1ObjectPtr->usartCircullarBuffertTxTail];
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <USART1_IRQHandler+0x14c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <USART1_IRQHandler+0x14c>)
 8000734:	6811      	ldr	r1, [r2, #0]
 8000736:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <USART1_IRQHandler+0x14c>)
 8000738:	6812      	ldr	r2, [r2, #0]
 800073a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800073e:	440a      	add	r2, r1
 8000740:	7912      	ldrb	r2, [r2, #4]
 8000742:	b292      	uxth	r2, r2
 8000744:	851a      	strh	r2, [r3, #40]	; 0x28
 8000746:	e013      	b.n	8000770 <USART1_IRQHandler+0x104>
			}
			else
			{
				usart1ObjectPtr->instance->CR1 &= ~USART_CR1_TXEIE;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <USART1_IRQHandler+0x14c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a1a      	ldr	r2, [pc, #104]	; (80007b8 <USART1_IRQHandler+0x14c>)
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	6812      	ldr	r2, [r2, #0]
 8000754:	6812      	ldr	r2, [r2, #0]
 8000756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800075a:	601a      	str	r2, [r3, #0]
				usart1ObjectPtr->instance->CR1 |= USART_CR1_TCIE;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <USART1_IRQHandler+0x14c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <USART1_IRQHandler+0x14c>)
 8000764:	6812      	ldr	r2, [r2, #0]
 8000766:	6812      	ldr	r2, [r2, #0]
 8000768:	6812      	ldr	r2, [r2, #0]
 800076a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800076e:	601a      	str	r2, [r3, #0]
			}
		}
		if(usart1ObjectPtr->instance->ISR & USART_ISR_TC)
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <USART1_IRQHandler+0x14c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077c:	2b00      	cmp	r3, #0
 800077e:	d015      	beq.n	80007ac <USART1_IRQHandler+0x140>
		{
			usart1ObjectPtr->instance->CR1 &= ~USART_CR1_TCIE;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <USART1_IRQHandler+0x14c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <USART1_IRQHandler+0x14c>)
 8000788:	6812      	ldr	r2, [r2, #0]
 800078a:	6812      	ldr	r2, [r2, #0]
 800078c:	6812      	ldr	r2, [r2, #0]
 800078e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000792:	601a      	str	r2, [r3, #0]
			usart1ObjectPtr->instance->ICR |= USART_ICR_TCCF;
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <USART1_IRQHandler+0x14c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <USART1_IRQHandler+0x14c>)
 800079c:	6812      	ldr	r2, [r2, #0]
 800079e:	6812      	ldr	r2, [r2, #0]
 80007a0:	6a12      	ldr	r2, [r2, #32]
 80007a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007a6:	621a      	str	r2, [r3, #32]
 80007a8:	e000      	b.n	80007ac <USART1_IRQHandler+0x140>
				return;
 80007aa:	bf00      	nop
		}
	}
}
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000098 	.word	0x20000098

080007bc <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	asm("NOP");
 80007c0:	bf00      	nop
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	asm("NOP");
 80007d0:	bf00      	nop
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	6039      	str	r1, [r7, #0]
 80007e6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da0b      	bge.n	8000808 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80007f0:	490d      	ldr	r1, [pc, #52]	; (8000828 <NVIC_SetPriority+0x4c>)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	f003 030f 	and.w	r3, r3, #15
 80007f8:	3b04      	subs	r3, #4
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	b2d2      	uxtb	r2, r2
 80007fe:	0112      	lsls	r2, r2, #4
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	440b      	add	r3, r1
 8000804:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000806:	e009      	b.n	800081c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000808:	4908      	ldr	r1, [pc, #32]	; (800082c <NVIC_SetPriority+0x50>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	683a      	ldr	r2, [r7, #0]
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00
 800082c:	e000e100 	.word	0xe000e100

08000830 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000840:	d301      	bcc.n	8000846 <SysTick_Config+0x16>
 8000842:	2301      	movs	r3, #1
 8000844:	e00f      	b.n	8000866 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <SysTick_Config+0x40>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800084e:	210f      	movs	r1, #15
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f7ff ffc2 	bl	80007dc <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SysTick_Config+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SysTick_Config+0x40>)
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	e000e010 	.word	0xe000e010

08000874 <SysTick_Handler>:
#include "utils.h"

volatile uint32_t timer = 0;

void SysTick_Handler (void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	if(timer) timer --;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <SysTick_Handler+0x20>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d004      	beq.n	800088a <SysTick_Handler+0x16>
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <SysTick_Handler+0x20>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3b01      	subs	r3, #1
 8000886:	4a03      	ldr	r2, [pc, #12]	; (8000894 <SysTick_Handler+0x20>)
 8000888:	6013      	str	r3, [r2, #0]
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	200000a4 	.word	0x200000a4

08000898 <USART1_RX_Callback>:

PERIPH_USART_Instance_t usart1 = {0};

void USART1_RX_Callback (void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	char * ptr = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
	ptr = malloc(PERIPH_USART_CIRCULLAR_BUFFER_RX_SIZE);
 80008a2:	2040      	movs	r0, #64	; 0x40
 80008a4:	f000 fa0a 	bl	8000cbc <malloc>
 80008a8:	4603      	mov	r3, r0
 80008aa:	607b      	str	r3, [r7, #4]
	memset(ptr, 0, PERIPH_USART_CIRCULLAR_BUFFER_RX_SIZE);
 80008ac:	2240      	movs	r2, #64	; 0x40
 80008ae:	2100      	movs	r1, #0
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 fa13 	bl	8000cdc <memset>
	PERIPH_USART_GetString(&usart1,ptr);
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <USART1_RX_Callback+0x3c>)
 80008ba:	f7ff fe09 	bl	80004d0 <PERIPH_USART_GetString>
	PERIPH_USART_puts(&usart1, ptr);
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <USART1_RX_Callback+0x3c>)
 80008c2:	f7ff feb9 	bl	8000638 <PERIPH_USART_puts>
	free(ptr);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 fa00 	bl	8000ccc <free>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000a8 	.word	0x200000a8

080008d8 <main>:

int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  RCC_Init();
 80008dc:	f000 f974 	bl	8000bc8 <RCC_Init>
  GPIO_init();
 80008e0:	f000 f924 	bl	8000b2c <GPIO_init>
  SysTick_Config(72000000UL / 1000);
 80008e4:	481a      	ldr	r0, [pc, #104]	; (8000950 <main+0x78>)
 80008e6:	f7ff ffa3 	bl	8000830 <SysTick_Config>
  PERIPH_USART_Init(USART1, &usart1, 115200);
 80008ea:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ee:	4919      	ldr	r1, [pc, #100]	; (8000954 <main+0x7c>)
 80008f0:	4819      	ldr	r0, [pc, #100]	; (8000958 <main+0x80>)
 80008f2:	f7ff fd2b 	bl	800034c <PERIPH_USART_Init>
  PERIPH_USART_RegisterRxCallback(&usart1,USART1_RX_Callback);
 80008f6:	4919      	ldr	r1, [pc, #100]	; (800095c <main+0x84>)
 80008f8:	4816      	ldr	r0, [pc, #88]	; (8000954 <main+0x7c>)
 80008fa:	f7ff fe15 	bl	8000528 <PERIPH_USART_RegisterRxCallback>
  I2C_init();
 80008fe:	f7ff fc63 	bl	80001c8 <I2C_init>

  while (1)
  {
	  PERIPH_USART_RXService();
 8000902:	f7ff fe23 	bl	800054c <PERIPH_USART_RXService>

	  if(!timer)
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <main+0x88>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1f9      	bne.n	8000902 <main+0x2a>
	  {
		  static uint32_t shift = 0x0100;
		  timer = 100;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <main+0x88>)
 8000910:	2264      	movs	r2, #100	; 0x64
 8000912:	601a      	str	r2, [r3, #0]
		  GPIOE->ODR &= 0x00FF;
 8000914:	4a13      	ldr	r2, [pc, #76]	; (8000964 <main+0x8c>)
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <main+0x8c>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	6153      	str	r3, [r2, #20]
		  GPIOE->ODR |= shift;
 800091e:	4911      	ldr	r1, [pc, #68]	; (8000964 <main+0x8c>)
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <main+0x8c>)
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <main+0x90>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4313      	orrs	r3, r2
 800092a:	614b      	str	r3, [r1, #20]
		  shift <<= 1;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <main+0x90>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <main+0x90>)
 8000934:	6013      	str	r3, [r2, #0]
		  if(shift == 0x10000) shift = 0x0100;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <main+0x90>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800093e:	d103      	bne.n	8000948 <main+0x70>
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <main+0x90>)
 8000942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000946:	601a      	str	r2, [r3, #0]
		  I2C_readByte(0b01110110);
 8000948:	2076      	movs	r0, #118	; 0x76
 800094a:	f7ff fc73 	bl	8000234 <I2C_readByte>
	  PERIPH_USART_RXService();
 800094e:	e7d8      	b.n	8000902 <main+0x2a>
 8000950:	00011940 	.word	0x00011940
 8000954:	200000a8 	.word	0x200000a8
 8000958:	40013800 	.word	0x40013800
 800095c:	08000899 	.word	0x08000899
 8000960:	200000a4 	.word	0x200000a4
 8000964:	48001000 	.word	0x48001000
 8000968:	20000000 	.word	0x20000000

0800096c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800096c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000970:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000972:	e003      	b.n	800097c <LoopCopyDataInit>

08000974 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000976:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000978:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800097a:	3104      	adds	r1, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <LoopForever+0xa>)
	ldr	r3, =_edata
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000980:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000982:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000984:	d3f6      	bcc.n	8000974 <CopyDataInit>
	ldr	r2, =_sbss
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000988:	e002      	b.n	8000990 <LoopFillZerobss>

0800098a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800098a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800098c:	f842 3b04 	str.w	r3, [r2], #4

08000990 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000992:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000994:	d3f9      	bcc.n	800098a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000996:	f000 f813 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099a:	f000 f96b 	bl	8000c74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800099e:	f7ff ff9b 	bl	80008d8 <main>

080009a2 <LoopForever>:

LoopForever:
    b LoopForever
 80009a2:	e7fe      	b.n	80009a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80009a8:	08000ea4 	.word	0x08000ea4
	ldr	r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009b0:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 80009b4:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 80009b8:	20000154 	.word	0x20000154

080009bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC1_2_IRQHandler>
	...

080009c0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <SystemInit+0x84>)
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <SystemInit+0x84>)
 80009c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009d4:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <SystemInit+0x88>)
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <SystemInit+0x88>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 80009e0:	4919      	ldr	r1, [pc, #100]	; (8000a48 <SystemInit+0x88>)
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <SystemInit+0x88>)
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <SystemInit+0x8c>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009ec:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <SystemInit+0x88>)
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <SystemInit+0x88>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <SystemInit+0x88>)
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <SystemInit+0x88>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000a08:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <SystemInit+0x88>)
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <SystemInit+0x88>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a12:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000a14:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <SystemInit+0x88>)
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <SystemInit+0x88>)
 8000a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1a:	f023 030f 	bic.w	r3, r3, #15
 8000a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000a20:	4909      	ldr	r1, [pc, #36]	; (8000a48 <SystemInit+0x88>)
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <SystemInit+0x88>)
 8000a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <SystemInit+0x90>)
 8000a28:	4013      	ands	r3, r2
 8000a2a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x88>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SystemInit+0x84>)
 8000a34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a38:	609a      	str	r2, [r3, #8]
#endif
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	f87fc00c 	.word	0xf87fc00c
 8000a50:	ff00fccc 	.word	0xff00fccc

08000a54 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <SystemCoreClockUpdate+0xc4>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f003 030c 	and.w	r3, r3, #12
 8000a72:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d007      	beq.n	8000a8a <SystemCoreClockUpdate+0x36>
 8000a7a:	2b08      	cmp	r3, #8
 8000a7c:	d009      	beq.n	8000a92 <SystemCoreClockUpdate+0x3e>
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d12f      	bne.n	8000ae2 <SystemCoreClockUpdate+0x8e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <SystemCoreClockUpdate+0xc8>)
 8000a84:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <SystemCoreClockUpdate+0xcc>)
 8000a86:	601a      	str	r2, [r3, #0]
      break;
 8000a88:	e02f      	b.n	8000aea <SystemCoreClockUpdate+0x96>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000a8a:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <SystemCoreClockUpdate+0xc8>)
 8000a8c:	4a24      	ldr	r2, [pc, #144]	; (8000b20 <SystemCoreClockUpdate+0xcc>)
 8000a8e:	601a      	str	r2, [r3, #0]
      break;
 8000a90:	e02b      	b.n	8000aea <SystemCoreClockUpdate+0x96>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <SystemCoreClockUpdate+0xc4>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a9a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <SystemCoreClockUpdate+0xc4>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa4:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	0c9b      	lsrs	r3, r3, #18
 8000aaa:	3302      	adds	r3, #2
 8000aac:	60bb      	str	r3, [r7, #8]

      if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d106      	bne.n	8000ac2 <SystemCoreClockUpdate+0x6e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <SystemCoreClockUpdate+0xd0>)
 8000ab8:	fb02 f303 	mul.w	r3, r2, r3
 8000abc:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <SystemCoreClockUpdate+0xc8>)
 8000abe:	6013      	str	r3, [r2, #0]
      {
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
      }
      break;
 8000ac0:	e013      	b.n	8000aea <SystemCoreClockUpdate+0x96>
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <SystemCoreClockUpdate+0xc4>)
 8000ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3301      	adds	r3, #1
 8000acc:	603b      	str	r3, [r7, #0]
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 8000ace:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <SystemCoreClockUpdate+0xcc>)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	fb02 f303 	mul.w	r3, r2, r3
 8000adc:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <SystemCoreClockUpdate+0xc8>)
 8000ade:	6013      	str	r3, [r2, #0]
      break;
 8000ae0:	e003      	b.n	8000aea <SystemCoreClockUpdate+0x96>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <SystemCoreClockUpdate+0xc8>)
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <SystemCoreClockUpdate+0xcc>)
 8000ae6:	601a      	str	r2, [r3, #0]
      break;
 8000ae8:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <SystemCoreClockUpdate+0xc4>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	091b      	lsrs	r3, r3, #4
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <SystemCoreClockUpdate+0xd4>)
 8000af6:	5cd3      	ldrb	r3, [r2, r3]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <SystemCoreClockUpdate+0xc8>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	fa22 f303 	lsr.w	r3, r2, r3
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <SystemCoreClockUpdate+0xc8>)
 8000b08:	6013      	str	r3, [r2, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	20000004 	.word	0x20000004
 8000b20:	007a1200 	.word	0x007a1200
 8000b24:	003d0900 	.word	0x003d0900
 8000b28:	20000008 	.word	0x20000008

08000b2c <GPIO_init>:

	return 0;
}

void GPIO_init()
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 8000b30:	4a22      	ldr	r2, [pc, #136]	; (8000bbc <GPIO_init+0x90>)
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <GPIO_init+0x90>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b3a:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000b3c:	4a1f      	ldr	r2, [pc, #124]	; (8000bbc <GPIO_init+0x90>)
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <GPIO_init+0x90>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b46:	6153      	str	r3, [r2, #20]
	GPIOE->MODER |= 0x55550000;
 8000b48:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <GPIO_init+0x94>)
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <GPIO_init+0x94>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000b52:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000b56:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR |= 0xFFFF0000;
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <GPIO_init+0x94>)
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <GPIO_init+0x94>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8000b62:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8000b66:	6093      	str	r3, [r2, #8]
	GPIOE->ODR |= 0xFF00;
 8000b68:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <GPIO_init+0x94>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <GPIO_init+0x94>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000b72:	6153      	str	r3, [r2, #20]

	//USART1 gpio configuration
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000b74:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <GPIO_init+0x90>)
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <GPIO_init+0x90>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b7e:	6153      	str	r3, [r2, #20]
	GPIOC->MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1;
 8000b80:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <GPIO_init+0x98>)
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <GPIO_init+0x98>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000b8a:	6013      	str	r3, [r2, #0]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4;
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <GPIO_init+0x98>)
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <GPIO_init+0x98>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000b96:	6093      	str	r3, [r2, #8]
	GPIOC->AFR[0] &= ~GPIO_AFRL_AFRL7;
 8000b98:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <GPIO_init+0x98>)
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <GPIO_init+0x98>)
 8000b9c:	6a1b      	ldr	r3, [r3, #32]
 8000b9e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000ba2:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |= (7<<16) | (7<<20);
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <GPIO_init+0x98>)
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <GPIO_init+0x98>)
 8000ba8:	6a1b      	ldr	r3, [r3, #32]
 8000baa:	f443 03ee 	orr.w	r3, r3, #7798784	; 0x770000
 8000bae:	6213      	str	r3, [r2, #32]


}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	48001000 	.word	0x48001000
 8000bc4:	48000800 	.word	0x48000800

08000bc8 <RCC_Init>:

void RCC_Init(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
	RCC->CR &= ~RCC_CR_HSEON;
 8000bcc:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <RCC_Init+0xa4>)
 8000bce:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <RCC_Init+0xa4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd6:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEBYP;
 8000bd8:	4a24      	ldr	r2, [pc, #144]	; (8000c6c <RCC_Init+0xa4>)
 8000bda:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <RCC_Init+0xa4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be2:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON;
 8000be4:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <RCC_Init+0xa4>)
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <RCC_Init+0xa4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bee:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000bf0:	bf00      	nop
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <RCC_Init+0xa4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f9      	beq.n	8000bf2 <RCC_Init+0x2a>
	RCC->CFGR |= RCC_CFGR_PLLMUL9;
 8000bfe:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <RCC_Init+0xa4>)
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <RCC_Init+0xa4>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000c08:	6053      	str	r3, [r2, #4]
	RCC->CFGR2 &= ~RCC_CFGR2_PREDIV;
 8000c0a:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <RCC_Init+0xa4>)
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <RCC_Init+0xa4>)
 8000c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c10:	f023 030f 	bic.w	r3, r3, #15
 8000c14:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR |= (1<<16);
 8000c16:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <RCC_Init+0xa4>)
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <RCC_Init+0xa4>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c20:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <RCC_Init+0xa4>)
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <RCC_Init+0xa4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c2c:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 8000c2e:	bf00      	nop
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <RCC_Init+0xa4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f9      	beq.n	8000c30 <RCC_Init+0x68>
	FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <RCC_Init+0xa8>)
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <RCC_Init+0xa8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000c48:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <RCC_Init+0xa4>)
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <RCC_Init+0xa4>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000c54:	bf00      	nop
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <RCC_Init+0xa4>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0f9      	beq.n	8000c56 <RCC_Init+0x8e>
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40022000 	.word	0x40022000

08000c74 <__libc_init_array>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	4e0d      	ldr	r6, [pc, #52]	; (8000cac <__libc_init_array+0x38>)
 8000c78:	4c0d      	ldr	r4, [pc, #52]	; (8000cb0 <__libc_init_array+0x3c>)
 8000c7a:	1ba4      	subs	r4, r4, r6
 8000c7c:	10a4      	asrs	r4, r4, #2
 8000c7e:	2500      	movs	r5, #0
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	d109      	bne.n	8000c98 <__libc_init_array+0x24>
 8000c84:	4e0b      	ldr	r6, [pc, #44]	; (8000cb4 <__libc_init_array+0x40>)
 8000c86:	4c0c      	ldr	r4, [pc, #48]	; (8000cb8 <__libc_init_array+0x44>)
 8000c88:	f000 f8fc 	bl	8000e84 <_init>
 8000c8c:	1ba4      	subs	r4, r4, r6
 8000c8e:	10a4      	asrs	r4, r4, #2
 8000c90:	2500      	movs	r5, #0
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	d105      	bne.n	8000ca2 <__libc_init_array+0x2e>
 8000c96:	bd70      	pop	{r4, r5, r6, pc}
 8000c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c9c:	4798      	blx	r3
 8000c9e:	3501      	adds	r5, #1
 8000ca0:	e7ee      	b.n	8000c80 <__libc_init_array+0xc>
 8000ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ca6:	4798      	blx	r3
 8000ca8:	3501      	adds	r5, #1
 8000caa:	e7f2      	b.n	8000c92 <__libc_init_array+0x1e>
 8000cac:	08000e9c 	.word	0x08000e9c
 8000cb0:	08000e9c 	.word	0x08000e9c
 8000cb4:	08000e9c 	.word	0x08000e9c
 8000cb8:	08000ea0 	.word	0x08000ea0

08000cbc <malloc>:
 8000cbc:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <malloc+0xc>)
 8000cbe:	4601      	mov	r1, r0
 8000cc0:	6818      	ldr	r0, [r3, #0]
 8000cc2:	f000 b861 	b.w	8000d88 <_malloc_r>
 8000cc6:	bf00      	nop
 8000cc8:	20000018 	.word	0x20000018

08000ccc <free>:
 8000ccc:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <free+0xc>)
 8000cce:	4601      	mov	r1, r0
 8000cd0:	6818      	ldr	r0, [r3, #0]
 8000cd2:	f000 b80b 	b.w	8000cec <_free_r>
 8000cd6:	bf00      	nop
 8000cd8:	20000018 	.word	0x20000018

08000cdc <memset>:
 8000cdc:	4402      	add	r2, r0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d100      	bne.n	8000ce6 <memset+0xa>
 8000ce4:	4770      	bx	lr
 8000ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8000cea:	e7f9      	b.n	8000ce0 <memset+0x4>

08000cec <_free_r>:
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	4605      	mov	r5, r0
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	d045      	beq.n	8000d80 <_free_r+0x94>
 8000cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cf8:	1f0c      	subs	r4, r1, #4
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bfb8      	it	lt
 8000cfe:	18e4      	addlt	r4, r4, r3
 8000d00:	f000 f8b0 	bl	8000e64 <__malloc_lock>
 8000d04:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <_free_r+0x98>)
 8000d06:	6813      	ldr	r3, [r2, #0]
 8000d08:	4610      	mov	r0, r2
 8000d0a:	b933      	cbnz	r3, 8000d1a <_free_r+0x2e>
 8000d0c:	6063      	str	r3, [r4, #4]
 8000d0e:	6014      	str	r4, [r2, #0]
 8000d10:	4628      	mov	r0, r5
 8000d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d16:	f000 b8a6 	b.w	8000e66 <__malloc_unlock>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d90c      	bls.n	8000d38 <_free_r+0x4c>
 8000d1e:	6821      	ldr	r1, [r4, #0]
 8000d20:	1862      	adds	r2, r4, r1
 8000d22:	4293      	cmp	r3, r2
 8000d24:	bf04      	itt	eq
 8000d26:	681a      	ldreq	r2, [r3, #0]
 8000d28:	685b      	ldreq	r3, [r3, #4]
 8000d2a:	6063      	str	r3, [r4, #4]
 8000d2c:	bf04      	itt	eq
 8000d2e:	1852      	addeq	r2, r2, r1
 8000d30:	6022      	streq	r2, [r4, #0]
 8000d32:	6004      	str	r4, [r0, #0]
 8000d34:	e7ec      	b.n	8000d10 <_free_r+0x24>
 8000d36:	4613      	mov	r3, r2
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	b10a      	cbz	r2, 8000d40 <_free_r+0x54>
 8000d3c:	42a2      	cmp	r2, r4
 8000d3e:	d9fa      	bls.n	8000d36 <_free_r+0x4a>
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	1858      	adds	r0, r3, r1
 8000d44:	42a0      	cmp	r0, r4
 8000d46:	d10b      	bne.n	8000d60 <_free_r+0x74>
 8000d48:	6820      	ldr	r0, [r4, #0]
 8000d4a:	4401      	add	r1, r0
 8000d4c:	1858      	adds	r0, r3, r1
 8000d4e:	4282      	cmp	r2, r0
 8000d50:	6019      	str	r1, [r3, #0]
 8000d52:	d1dd      	bne.n	8000d10 <_free_r+0x24>
 8000d54:	6810      	ldr	r0, [r2, #0]
 8000d56:	6852      	ldr	r2, [r2, #4]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	4401      	add	r1, r0
 8000d5c:	6019      	str	r1, [r3, #0]
 8000d5e:	e7d7      	b.n	8000d10 <_free_r+0x24>
 8000d60:	d902      	bls.n	8000d68 <_free_r+0x7c>
 8000d62:	230c      	movs	r3, #12
 8000d64:	602b      	str	r3, [r5, #0]
 8000d66:	e7d3      	b.n	8000d10 <_free_r+0x24>
 8000d68:	6820      	ldr	r0, [r4, #0]
 8000d6a:	1821      	adds	r1, r4, r0
 8000d6c:	428a      	cmp	r2, r1
 8000d6e:	bf04      	itt	eq
 8000d70:	6811      	ldreq	r1, [r2, #0]
 8000d72:	6852      	ldreq	r2, [r2, #4]
 8000d74:	6062      	str	r2, [r4, #4]
 8000d76:	bf04      	itt	eq
 8000d78:	1809      	addeq	r1, r1, r0
 8000d7a:	6021      	streq	r1, [r4, #0]
 8000d7c:	605c      	str	r4, [r3, #4]
 8000d7e:	e7c7      	b.n	8000d10 <_free_r+0x24>
 8000d80:	bd38      	pop	{r3, r4, r5, pc}
 8000d82:	bf00      	nop
 8000d84:	20000144 	.word	0x20000144

08000d88 <_malloc_r>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	1ccd      	adds	r5, r1, #3
 8000d8c:	f025 0503 	bic.w	r5, r5, #3
 8000d90:	3508      	adds	r5, #8
 8000d92:	2d0c      	cmp	r5, #12
 8000d94:	bf38      	it	cc
 8000d96:	250c      	movcc	r5, #12
 8000d98:	2d00      	cmp	r5, #0
 8000d9a:	4606      	mov	r6, r0
 8000d9c:	db01      	blt.n	8000da2 <_malloc_r+0x1a>
 8000d9e:	42a9      	cmp	r1, r5
 8000da0:	d903      	bls.n	8000daa <_malloc_r+0x22>
 8000da2:	230c      	movs	r3, #12
 8000da4:	6033      	str	r3, [r6, #0]
 8000da6:	2000      	movs	r0, #0
 8000da8:	bd70      	pop	{r4, r5, r6, pc}
 8000daa:	f000 f85b 	bl	8000e64 <__malloc_lock>
 8000dae:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <_malloc_r+0xb4>)
 8000db0:	6814      	ldr	r4, [r2, #0]
 8000db2:	4621      	mov	r1, r4
 8000db4:	b991      	cbnz	r1, 8000ddc <_malloc_r+0x54>
 8000db6:	4c22      	ldr	r4, [pc, #136]	; (8000e40 <_malloc_r+0xb8>)
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	b91b      	cbnz	r3, 8000dc4 <_malloc_r+0x3c>
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	f000 f841 	bl	8000e44 <_sbrk_r>
 8000dc2:	6020      	str	r0, [r4, #0]
 8000dc4:	4629      	mov	r1, r5
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	f000 f83c 	bl	8000e44 <_sbrk_r>
 8000dcc:	1c43      	adds	r3, r0, #1
 8000dce:	d126      	bne.n	8000e1e <_malloc_r+0x96>
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	6033      	str	r3, [r6, #0]
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	f000 f846 	bl	8000e66 <__malloc_unlock>
 8000dda:	e7e4      	b.n	8000da6 <_malloc_r+0x1e>
 8000ddc:	680b      	ldr	r3, [r1, #0]
 8000dde:	1b5b      	subs	r3, r3, r5
 8000de0:	d41a      	bmi.n	8000e18 <_malloc_r+0x90>
 8000de2:	2b0b      	cmp	r3, #11
 8000de4:	d90f      	bls.n	8000e06 <_malloc_r+0x7e>
 8000de6:	600b      	str	r3, [r1, #0]
 8000de8:	50cd      	str	r5, [r1, r3]
 8000dea:	18cc      	adds	r4, r1, r3
 8000dec:	4630      	mov	r0, r6
 8000dee:	f000 f83a 	bl	8000e66 <__malloc_unlock>
 8000df2:	f104 000b 	add.w	r0, r4, #11
 8000df6:	1d23      	adds	r3, r4, #4
 8000df8:	f020 0007 	bic.w	r0, r0, #7
 8000dfc:	1ac3      	subs	r3, r0, r3
 8000dfe:	d01b      	beq.n	8000e38 <_malloc_r+0xb0>
 8000e00:	425a      	negs	r2, r3
 8000e02:	50e2      	str	r2, [r4, r3]
 8000e04:	bd70      	pop	{r4, r5, r6, pc}
 8000e06:	428c      	cmp	r4, r1
 8000e08:	bf0d      	iteet	eq
 8000e0a:	6863      	ldreq	r3, [r4, #4]
 8000e0c:	684b      	ldrne	r3, [r1, #4]
 8000e0e:	6063      	strne	r3, [r4, #4]
 8000e10:	6013      	streq	r3, [r2, #0]
 8000e12:	bf18      	it	ne
 8000e14:	460c      	movne	r4, r1
 8000e16:	e7e9      	b.n	8000dec <_malloc_r+0x64>
 8000e18:	460c      	mov	r4, r1
 8000e1a:	6849      	ldr	r1, [r1, #4]
 8000e1c:	e7ca      	b.n	8000db4 <_malloc_r+0x2c>
 8000e1e:	1cc4      	adds	r4, r0, #3
 8000e20:	f024 0403 	bic.w	r4, r4, #3
 8000e24:	42a0      	cmp	r0, r4
 8000e26:	d005      	beq.n	8000e34 <_malloc_r+0xac>
 8000e28:	1a21      	subs	r1, r4, r0
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	f000 f80a 	bl	8000e44 <_sbrk_r>
 8000e30:	3001      	adds	r0, #1
 8000e32:	d0cd      	beq.n	8000dd0 <_malloc_r+0x48>
 8000e34:	6025      	str	r5, [r4, #0]
 8000e36:	e7d9      	b.n	8000dec <_malloc_r+0x64>
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000144 	.word	0x20000144
 8000e40:	20000148 	.word	0x20000148

08000e44 <_sbrk_r>:
 8000e44:	b538      	push	{r3, r4, r5, lr}
 8000e46:	4c06      	ldr	r4, [pc, #24]	; (8000e60 <_sbrk_r+0x1c>)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	4605      	mov	r5, r0
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	6023      	str	r3, [r4, #0]
 8000e50:	f000 f80a 	bl	8000e68 <_sbrk>
 8000e54:	1c43      	adds	r3, r0, #1
 8000e56:	d102      	bne.n	8000e5e <_sbrk_r+0x1a>
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	b103      	cbz	r3, 8000e5e <_sbrk_r+0x1a>
 8000e5c:	602b      	str	r3, [r5, #0]
 8000e5e:	bd38      	pop	{r3, r4, r5, pc}
 8000e60:	20000150 	.word	0x20000150

08000e64 <__malloc_lock>:
 8000e64:	4770      	bx	lr

08000e66 <__malloc_unlock>:
 8000e66:	4770      	bx	lr

08000e68 <_sbrk>:
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <_sbrk+0x14>)
 8000e6a:	6819      	ldr	r1, [r3, #0]
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	b909      	cbnz	r1, 8000e74 <_sbrk+0xc>
 8000e70:	4903      	ldr	r1, [pc, #12]	; (8000e80 <_sbrk+0x18>)
 8000e72:	6019      	str	r1, [r3, #0]
 8000e74:	6818      	ldr	r0, [r3, #0]
 8000e76:	4402      	add	r2, r0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	4770      	bx	lr
 8000e7c:	2000014c 	.word	0x2000014c
 8000e80:	20000154 	.word	0x20000154

08000e84 <_init>:
 8000e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e86:	bf00      	nop
 8000e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e8a:	bc08      	pop	{r3}
 8000e8c:	469e      	mov	lr, r3
 8000e8e:	4770      	bx	lr

08000e90 <_fini>:
 8000e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e92:	bf00      	nop
 8000e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e96:	bc08      	pop	{r3}
 8000e98:	469e      	mov	lr, r3
 8000e9a:	4770      	bx	lr
